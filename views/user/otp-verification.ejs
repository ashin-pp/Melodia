<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OTP Verify</title>
    <!-- SweetAlert2 CDN -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Helvetica, sans-serif;
            background: #3a3a3a;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .page-title {
            position: absolute;
            top: 25px;
            left: 40px;
            color: #888;
            font-size: 16px;
            font-weight: 400;
            opacity: 0;
            animation: fadeIn 0.8s ease-out 0.2s forwards;
        }

        .otp-container {
            background: #ffffff;
            border-radius: 16px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);
            padding: 40px 35px;
            width: 100%;
            max-width: 550px;
            text-align: center;
            opacity: 0;
            transform: translateY(20px);
            animation: slideInUp 0.6s ease-out 0.3s forwards;
        }

        @keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
            }
            to {
                opacity: 1;
            }
        }

        .logo {
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 22px;
            font-weight: 600;
            color: #333;
            margin-bottom: 35px;
            opacity: 0;
            animation: fadeIn 0.6s ease-out 0.6s forwards;
        }

        .logo::before {
            content: "♪";
            margin-right: 8px;
            font-size: 24px;
            color: #333;
        }

        .otp-content {
            opacity: 0;
            animation: fadeIn 0.6s ease-out 0.8s forwards;
        }

        .otp-title {
            font-size: 16px;
            font-weight: 500;
            color: #333;
            margin-bottom: 8px;
            line-height: 1.4;
        }

        .otp-subtitle {
            font-size: 14px;
            color: #666;
            margin-bottom: 35px;
            line-height: 1.4;
        }

        .email-display {
            font-size: 14px;
            color: #333;
            font-weight: 500;
            margin-bottom: 25px;
            background: #f5f5f5;
            padding: 10px;
            border-radius: 6px;
        }

        .otp-input-container {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-bottom: 30px;
        }

        .otp-input {
            width: 50px;
            height: 50px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            text-align: center;
            font-size: 18px;
            font-weight: 600;
            color: #333;
            background: #ffffff;
            outline: none;
            transition: all 0.3s ease;
        }

        .otp-input:focus {
            border-color: #666;
            box-shadow: 0 0 0 3px rgba(102, 102, 102, 0.1);
            transform: scale(1.05);
        }

        .otp-input.filled {
            border-color: #333;
            background: #f8f8f8;
        }

        .verify-button {
            width: 80%;
            padding: 14px;
            background: #000000;
            color: #ffffff;
            border: none;
            border-radius: 8px;
            font-size: 15px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 20px;
        }

        .verify-button:hover {
            background: #1a1a1a;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
        }

        .verify-button:active {
            transform: translateY(0);
        }

        .verify-button:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .resend-text {
            font-size: 14px;
            color: #666;
            margin-top: 15px;
        }

        .resend-link {
            color: #333;
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s ease;
        }

        .resend-link:hover {
            color: #000;
            text-decoration: underline;
        }

        .resend-link:disabled,
        .resend-link.disabled {
            color: #ccc;
            cursor: not-allowed;
            pointer-events: none;
            position: relative;
        }
        
        /* Resend timer styles */
        .resend-container {
            position: relative;
            display: inline-block;
        }
        
        .resend-progress {
            position: absolute;
            bottom: -3px;
            left: 0;
            height: 2px;
            background: #333;
            border-radius: 1px;
            transition: width 1s linear;
            opacity: 0;
        }
        
        .resend-link.disabled .resend-progress {
            opacity: 1;
        }
        
        .resend-timer-info {
            font-size: 12px;
            color: #999;
            margin-top: 8px;
            font-style: italic;
        }

        /* Loading spinner */
        .loading-spinner {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Error state */
        .otp-input.error {
            border-color: #e53e3e;
            box-shadow: 0 0 0 3px rgba(229, 62, 62, 0.1);
            animation: shake 0.5s ease-in-out;
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }

        /* Success state */
        .otp-input.success {
            border-color: #38a169;
            box-shadow: 0 0 0 3px rgba(56, 161, 105, 0.1);
        }

        /* Timer display */
        .timer-display {
            font-size: 13px;
            color: #666;
            margin-top: 10px;
            margin-bottom: 15px;
        }

        .timer-display.expired {
            color: #e53e3e;
        }

        /* Back to login link */
        .back-to-login {
            margin-top: 20px;
        }

        .back-to-login a {
            color: #666;
            text-decoration: none;
            font-size: 14px;
            transition: color 0.3s ease;
        }

        .back-to-login a:hover {
            color: #333;
            text-decoration: underline;
        }

        /* Responsive Design */
        @media (max-width: 480px) {
            .otp-container {
                padding: 30px 25px;
                max-width: 350px;
            }

            .otp-input {
                width: 45px;
                height: 45px;
                font-size: 16px;
            }

            .otp-input-container {
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="page-title"></div>
    
    <div class="otp-container">
        <div class="logo">Melodia</div>
        
        <div class="otp-content">
            <div class="otp-title">Enter the OTP which was sent</div>
            <div class="otp-subtitle">to your email</div>
            
            <% if (typeof email !== 'undefined' && email) { %>
                <div class="email-display"><%= email %></div>
            <% } %>
            
            <form id="otpForm" action="/verify-otp" method="POST">
                <div class="otp-input-container">
                    <input type="text" class="otp-input" maxlength="1" name="otp1" data-index="0" required>
                    <input type="text" class="otp-input" maxlength="1" name="otp2" data-index="1" required>
                    <input type="text" class="otp-input" maxlength="1" name="otp3" data-index="2" required>
                    <input type="text" class="otp-input" maxlength="1" name="otp4" data-index="3" required>
                    <input type="text" class="otp-input" maxlength="1" name="otp5" data-index="4" required>
                    <input type="text" class="otp-input" maxlength="1" name="otp6" data-index="5" required>
                </div>
                
                <!-- Hidden fields for backend -->
                <input type="hidden" name="otp" id="combinedOtp">
                <% if (typeof email !== 'undefined' && email) { %>
                    <input type="hidden" name="email" value="<%= email %>">
                <% } %>
                
                <button type="submit" class="verify-button" disabled>Verify</button>
            </form>
            
            <!-- Timer display -->
            <% if (typeof otpExpires !== 'undefined' && otpExpires) { %>
                <div class="timer-display" id="timerDisplay">
                    OTP expires in: <span id="countdown"></span>
                </div>
            <% } %>
            
            <div class="resend-text">
                Didn't receive the code? 
                <div class="resend-container">
                    <a href="#" class="resend-link" id="resendLink" onclick="resendOTP(event)">Resend</a>
                    <div class="resend-progress" id="resendProgress"></div>
                </div>
            </div>
            <div class="resend-timer-info" id="resendTimerInfo" style="display: none;">
                You can request a new OTP every 60 seconds to prevent spam
            </div>
            
            <div class="back-to-login">
                <a href="/signUp">← Back to Signup</a>
            </div>
        </div>
    </div>

    <script>
        // OTP Timer countdown
        <% if (typeof otpExpires !== 'undefined' && otpExpires) { %>
            let otpExpiresAt = <%= otpExpires %>;
            
            function updateCountdown() {
                const now = Date.now();
                const timeLeft = otpExpiresAt - now;
                
                if (timeLeft <= 0) {
                    document.getElementById('countdown').textContent = 'Expired';
                    document.getElementById('timerDisplay').classList.add('expired');
                    document.querySelector('.verify-button').disabled = true;
                    clearInterval(countdownInterval);
                    return;
                }
                
                const minutes = Math.floor(timeLeft / 60000);
                const seconds = Math.floor((timeLeft % 60000) / 1000);
                document.getElementById('countdown').textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
            }
            
            const countdownInterval = setInterval(updateCountdown, 1000);
            updateCountdown(); // Initial call
        <% } %>

        // OTP input functionality
        const otpInputs = document.querySelectorAll('.otp-input');
        const verifyBtn = document.querySelector('.verify-button');
        
        otpInputs.forEach((input, index) => {
            input.addEventListener('input', function(e) {
                const value = e.target.value;
                
                // Only allow numbers
                if (!/^[0-9]$/.test(value) && value !== '') {
                    e.target.value = '';
                    return;
                }
                
                // Add filled class and move to next input
                if (value) {
                    e.target.classList.add('filled');
                    if (index < otpInputs.length - 1) {
                        otpInputs[index + 1].focus();
                    }
                } else {
                    e.target.classList.remove('filled');
                }
                
                // Remove error state
                e.target.classList.remove('error');
                
                // Check if all inputs are filled
                updateVerifyButton();
            });
            
            input.addEventListener('keydown', function(e) {
                // Handle backspace
                if (e.key === 'Backspace' && !e.target.value && index > 0) {
                    otpInputs[index - 1].focus();
                    otpInputs[index - 1].value = '';
                    otpInputs[index - 1].classList.remove('filled');
                    updateVerifyButton();
                }
                
                // Handle paste
                if (e.key === 'v' && (e.ctrlKey || e.metaKey)) {
                    e.preventDefault();
                    navigator.clipboard.readText().then(text => {
                        const digits = text.replace(/[^0-9]/g, '').slice(0, 6);
                        digits.split('').forEach((digit, i) => {
                            if (otpInputs[i]) {
                                otpInputs[i].value = digit;
                                otpInputs[i].classList.add('filled');
                            }
                        });
                        
                        // Focus last filled input
                        const lastIndex = Math.min(digits.length - 1, otpInputs.length - 1);
                        if (lastIndex >= 0) {
                            otpInputs[lastIndex].focus();
                        }
                        
                        updateVerifyButton();
                    });
                }
                
                // Handle arrow keys
                if (e.key === 'ArrowRight' && index < otpInputs.length - 1) {
                    otpInputs[index + 1].focus();
                }
                if (e.key === 'ArrowLeft' && index > 0) {
                    otpInputs[index - 1].focus();
                }
            });
            
            // Handle focus - select all text
            input.addEventListener('focus', function(e) {
                e.target.select();
            });
        });
        
        function updateVerifyButton() {
            const allFilled = Array.from(otpInputs).every(input => input.value);
            verifyBtn.disabled = !allFilled;
        }
        
        // Form submission
        document.getElementById('otpForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const otp = Array.from(otpInputs).map(input => input.value).join('');
            
            if (otp.length !== 6) {
                showError('Please enter all 6 digits');
                otpInputs.forEach(input => {
                    if (!input.value) {
                        input.classList.add('error');
                    }
                });
                return;
            }
            
            // Set the combined OTP value
            document.getElementById('combinedOtp').value = otp;
            
            // Show loading state
            const originalText = verifyBtn.innerHTML;
            verifyBtn.innerHTML = '<div class="loading-spinner"></div> Verifying...';
            verifyBtn.disabled = true;
            
            // Submit the form
            this.submit();
        });
        
        // Resend timer variables
        let resendTimer = null;
        let resendTimeLeft = 0;
        const RESEND_COOLDOWN = 60; // 60 seconds cooldown
        
        // Resend OTP function with timer
        function resendOTP(event) {
            event.preventDefault();
            
            const resendLink = document.getElementById('resendLink');
            
            // Check if still in cooldown
            if (resendTimeLeft > 0) {
                showInfo(`Please wait ${resendTimeLeft} seconds before requesting another OTP`);
                return;
            }
            
            const originalText = resendLink.textContent;
            
            // Disable the link and show loading
            resendLink.classList.add('disabled');
            resendLink.textContent = 'Sending...';
            
            // Make request to resend OTP
            fetch('/resend-otp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    email: document.querySelector('input[name="email"]')?.value || '' 
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showSuccess('OTP has been resent to your email!');
                    
                    // Start resend cooldown timer
                    startResendTimer();
                    
                    // Reset OTP timer if available
                    <% if (typeof otpExpires !== 'undefined') { %>
                        otpExpiresAt = Date.now() + (5 * 60 * 1000); // 5 minutes from now
                        document.getElementById('timerDisplay').classList.remove('expired');
                        clearInterval(countdownInterval);
                        const newCountdownInterval = setInterval(updateCountdown, 1000);
                        updateCountdown();
                    <% } %>
                    
                    // Clear current inputs
                    otpInputs.forEach(input => {
                        input.value = '';
                        input.classList.remove('filled', 'error');
                    });
                    otpInputs[0].focus();
                    updateVerifyButton();
                    
                } else {
                    showError(data.message || 'Failed to resend OTP. Please try again.');
                    // Re-enable link immediately on error
                    resendLink.classList.remove('disabled');
                    resendLink.textContent = originalText;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showError('Network error. Please check your connection and try again.');
                // Re-enable link immediately on error
                resendLink.classList.remove('disabled');
                resendLink.textContent = originalText;
            });
        }
        
        // Start resend cooldown timer
        function startResendTimer() {
            const resendLink = document.getElementById('resendLink');
            
            // Set initial time if not already set
            if (resendTimeLeft <= 0) {
                resendTimeLeft = RESEND_COOLDOWN;
            }
            
            // Store cooldown in session
            storeResendCooldown();
            
            // Clear any existing timer
            if (resendTimer) {
                clearInterval(resendTimer);
            }
            
            // Update display immediately
            updateResendDisplay();
            
            // Start countdown
            resendTimer = setInterval(() => {
                resendTimeLeft--;
                updateResendDisplay();
                
                if (resendTimeLeft <= 0) {
                    clearInterval(resendTimer);
                    resendTimer = null;
                    clearResendCooldown();
                    resendLink.classList.remove('disabled');
                    resendLink.textContent = 'Resend';
                }
            }, 1000);
        }
        
        // Update resend button display
        function updateResendDisplay() {
            const resendLink = document.getElementById('resendLink');
            const resendProgress = document.getElementById('resendProgress');
            const resendTimerInfo = document.getElementById('resendTimerInfo');
            
            if (resendTimeLeft > 0) {
                resendLink.classList.add('disabled');
                resendLink.textContent = `Resend in ${resendTimeLeft}s`;
                
                // Update progress bar
                const progressPercent = ((RESEND_COOLDOWN - resendTimeLeft) / RESEND_COOLDOWN) * 100;
                resendProgress.style.width = `${progressPercent}%`;
                
                // Show timer info
                resendTimerInfo.style.display = 'block';
            } else {
                resendLink.classList.remove('disabled');
                resendLink.textContent = 'Resend';
                resendProgress.style.width = '0%';
                resendTimerInfo.style.display = 'none';
            }
        }
        
        // SweetAlert functions
        function showSuccess(message) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: message,
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                toast: true,
                position: 'top-end',
                background: '#f0fff4',
                color: '#2f855a'
            });
        }
        
        function showError(message) {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: message,
                showConfirmButton: false,
                timer: 4000,
                timerProgressBar: true,
                toast: true,
                position: 'top-end',
                background: '#fef5e7',
                color: '#c53030'
            });
        }
        
        function showInfo(message) {
            Swal.fire({
                icon: 'info',
                title: 'Info',
                text: message,
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                toast: true,
                position: 'top-end',
                background: '#ebf8ff',
                color: '#2b6cb0'
            });
        }
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            otpInputs[0].focus();
            
            // Check if there's a stored resend cooldown (optional enhancement)
            const storedCooldown = sessionStorage.getItem('otpResendCooldown');
            if (storedCooldown) {
                const cooldownEnd = parseInt(storedCooldown);
                const now = Date.now();
                const timeLeft = Math.max(0, Math.ceil((cooldownEnd - now) / 1000));
                
                if (timeLeft > 0) {
                    resendTimeLeft = timeLeft;
                    startResendTimer();
                }
            }
        });
        
        // Store cooldown in session storage (optional enhancement)
        function storeResendCooldown() {
            const cooldownEnd = Date.now() + (RESEND_COOLDOWN * 1000);
            sessionStorage.setItem('otpResendCooldown', cooldownEnd.toString());
        }
        
        // Clear stored cooldown
        function clearResendCooldown() {
            sessionStorage.removeItem('otpResendCooldown');
        }
    </script>

    <!-- Enhanced flash message handling with SweetAlert2 -->
    <% if (typeof message !== 'undefined' && message) { %>
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                const message = '<%= message %>';
                const isError = <%= typeof isError !== 'undefined' ? isError : true %>;
                
                if (isError) {
                    showError(message);
                    
                    // Add error state to all inputs for invalid OTP
                    if (message.toLowerCase().includes('otp') || message.toLowerCase().includes('invalid') || message.toLowerCase().includes('expired')) {
                        otpInputs.forEach(input => {
                            input.classList.add('error');
                        });
                        
                        // Clear inputs and focus first one
                        setTimeout(() => {
                            otpInputs.forEach(input => {
                                input.value = '';
                                input.classList.remove('filled');
                            });
                            otpInputs[0].focus();
                            updateVerifyButton();
                        }, 1000);
                    }
                } else {
                    showSuccess(message);
                }
            });
        </script>
    <% } %>
</body>
</html>
