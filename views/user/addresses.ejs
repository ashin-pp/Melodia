<%- include('../partials/header-common', { title: 'Manage Addresses - Melodia' }) %>

<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Inter', sans-serif;
        background: #f1f5f9;
        color: #334155;
        line-height: 1.6;
        margin-top: 80px;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    .page-header {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        border-left: 4px solid #3b82f6;
    }

    .page-title {
        font-size: 1.875rem;
        font-weight: 700;
        color: #1e293b;
        margin-bottom: 0.5rem;
    }

    .page-subtitle {
        color: #64748b;
        font-size: 1rem;
    }

    .profile-grid {
        display: grid;
        grid-template-columns: 280px 1fr;
        gap: 2rem;
    }

    .sidebar {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        height: fit-content;
    }

    .user-card {
        text-align: center;
        padding-bottom: 1.5rem;
        margin-bottom: 1.5rem;
        border-bottom: 1px solid #e2e8f0;
    }

    .avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        margin: 0 auto 1rem;
        overflow: hidden;
        border: 3px solid #e2e8f0;
        position: relative;
    }

    .avatar img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .avatar-placeholder {
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, #3b82f6, #1d4ed8);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.5rem;
        font-weight: 600;
    }

    .user-name {
        font-size: 1.125rem;
        font-weight: 600;
        color: #1e293b;
        margin-bottom: 0.25rem;
    }

    .user-email {
        color: #64748b;
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
    }

    .user-since {
        color: #94a3b8;
        font-size: 0.75rem;
    }

    .nav-menu {
        list-style: none;
    }

    .nav-item {
        margin-bottom: 0.25rem;
    }

    .nav-link {
        display: flex;
        align-items: center;
        padding: 0.75rem 1rem;
        color: #64748b;
        text-decoration: none;
        border-radius: 8px;
        transition: all 0.2s;
        font-weight: 500;
    }

    .nav-link:hover,
    .nav-link.active {
        background: #f1f5f9;
        color: #3b82f6;
        text-decoration: none;
    }

    .nav-link i {
        margin-right: 0.75rem;
        width: 16px;
        font-size: 14px;
    }

    .logout-button {
        width: 100%;
        background: #ef4444;
        color: white;
        border: none;
        padding: 0.75rem;
        border-radius: 8px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        margin-top: 1.5rem;
        font-size: 0.875rem;
    }

    .logout-button:hover {
        background: #dc2626;
    }

    .main-content {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .content-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #e2e8f0;
    }

    .content-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #1e293b;
    }

    .btn-primary {
        background: #3b82f6;
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        font-size: 0.875rem;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-primary:hover {
        background: #2563eb;
    }

    .addresses-grid {
        display: grid;
        gap: 1.5rem;
    }

    .address-card {
        background: #f8fafc;
        border: 1px solid #e2e8f0;
        border-radius: 12px;
        padding: 1.5rem;
        position: relative;
        transition: all 0.2s;
    }

    .address-card:hover {
        border-color: #3b82f6;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    }

    .address-type-badge {
        position: absolute;
        top: 1rem;
        right: 1rem;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.025em;
        color: white;
    }

    .home-badge {
        background: #ef4444;
    }

    .work-badge {
        background: #3b82f6;
    }

    .address-info h4 {
        font-size: 1.125rem;
        font-weight: 600;
        color: #1e293b;
        margin-bottom: 0.75rem;
    }

    .address-info p {
        color: #64748b;
        margin-bottom: 0.5rem;
        font-size: 0.875rem;
    }

    .address-info p:last-child {
        margin-bottom: 0;
    }

    .address-actions {
        margin-top: 1.5rem;
        display: flex;
        gap: 0.75rem;
        padding-top: 1rem;
        border-top: 1px solid #e2e8f0;
    }

    .btn-edit {
        background: #10b981;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        font-size: 0.75rem;
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
    }

    .btn-edit:hover {
        background: #059669;
    }

    .btn-delete {
        background: #ef4444;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        font-size: 0.75rem;
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
    }

    .btn-delete:hover {
        background: #dc2626;
    }

    .no-addresses {
        text-align: center;
        padding: 4rem 2rem;
        color: #64748b;
    }

    .no-addresses i {
        font-size: 3rem;
        color: #cbd5e1;
        margin-bottom: 1rem;
    }

    .no-addresses h3 {
        font-size: 1.25rem;
        font-weight: 600;
        color: #1e293b;
        margin-bottom: 0.5rem;
    }

    .no-addresses p {
        margin-bottom: 2rem;
    }

    @media (max-width: 768px) {
        .profile-grid {
            grid-template-columns: 1fr;
            gap: 1rem;
        }

        .container {
            padding: 1rem;
        }

        .page-header,
        .main-content {
            padding: 1.5rem;
        }

        .content-header {
            flex-direction: column;
            gap: 1rem;
            align-items: stretch;
        }

        .address-card {
            padding: 1rem;
        }

        .address-actions {
            flex-direction: column;
        }
    }
</style>

<body>
    <div class="container">
        <div class="page-header">
            <h1 class="page-title">Manage Addresses</h1>
            <p class="page-subtitle">Add, edit, and manage your delivery addresses</p>
        </div>

        <div class="profile-grid">
            <div class="sidebar">
                <div class="user-card">
                    <div class="avatar">
                        <% if (user && user.avatar && user.avatar.url) { %>
                            <img src="<%= user.avatar.url %>" alt="Profile Picture">
                        <% } else { %>
                            <div class="avatar-placeholder">
                                <%= user && user.name ? user.name.charAt(0).toUpperCase() : 'U' %>
                            </div>
                        <% } %>
                    </div>
                    <div class="user-name"><%= user && user.name ? user.name : 'User' %></div>
                    <div class="user-email"><%= user && user.email ? user.email : '' %></div>
                    <!-- <div class="user-since">
                        Member since <%= user && user.createdOn ? new Date(user.createdOn).toLocaleDateString('en-US', { month: 'long', year: 'numeric' }) : 'Unknown' %>
                    </div> -->
                </div>

                <ul class="nav-menu">
                    <li class="nav-item">
                        <a href="/profile" class="nav-link">
                            <i class="fas fa-user"></i>
                            Account Overview
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="/orders" class="nav-link">
                            <i class="fas fa-shopping-bag"></i>
                            My Orders
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="/addresses" class="nav-link active">
                            <i class="fas fa-map-marker-alt"></i>
                            Addresses
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="/wallet" class="nav-link">
                            <i class="fas fa-wallet"></i>
                            Wallet
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="/password" class="nav-link">
                            <i class="fas fa-lock"></i>
                            Password
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="/wishlist" class="nav-link">
                            <i class="fas fa-heart"></i>
                            Wishlist
                        </a>
                    </li>
                </ul>

                <button class="logout-button" onclick="confirmLogout()">
                    <i class="fas fa-sign-out-alt" style="margin-right: 0.5rem;"></i>
                    Logout
                </button>
            </div>

            <div class="main-content">
                <div class="content-header">
                    <h2 class="content-title">My Addresses</h2>
                    <button class="btn-primary" onclick="showAddAddressModal()">
                        <i class="fas fa-plus"></i>
                        Add New Address
                    </button>
                </div>

                <div id="addressesList">
                    <% if (addresses && addresses.length > 0) { %>
                        <div class="addresses-grid">
                            <% addresses.forEach(address => { %>
                                <div class="address-card">
                                    <div class="address-type-badge <%= address.addressType.toLowerCase() %>-badge">
                                        <i class="fas <%= address.addressType === 'HOME' ? 'fa-home' : 'fa-briefcase' %>" style="margin-right: 5px;"></i>
                                        <%= address.addressType %>
                                    </div>
                                    <div class="address-info">
                                        <h4><%= address.fullName %></h4>
                                        <p><strong>Phone:</strong> <%= address.phoneNumber %></p>
                                        <p><%= address.addressLine1 %></p>
                                        <% if (address.addressLine2) { %>
                                            <p><%= address.addressLine2 %></p>
                                        <% } %>
                                        <p><%= address.city %>, <%= address.state %> - <%= address.pincode %></p>
                                        <p><strong>Type:</strong> <%= address.addressType %></p>
                                    </div>
                                    <div class="address-actions">
                                        <button class="btn-edit" 
                                                data-address-id="<%= address._id %>"
                                                data-full-name="<%= address.fullName.replace(/"/g, '&quot;') %>"
                                                data-phone="<%= address.phoneNumber %>"
                                                data-address-line1="<%= address.addressLine1.replace(/"/g, '&quot;') %>"
                                                data-address-line2="<%= (address.addressLine2 || '').replace(/"/g, '&quot;') %>"
                                                data-city="<%= address.city.replace(/"/g, '&quot;') %>"
                                                data-state="<%= address.state.replace(/"/g, '&quot;') %>"
                                                data-pincode="<%= address.pincode %>"
                                                data-address-type="<%= address.addressType %>"
                                                onclick="editAddress(this)">
                                            <i class="fas fa-edit"></i> Edit
                                        </button>
                                        <button class="btn-delete" onclick="deleteAddress('<%= address._id %>')">
                                            <i class="fas fa-trash"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            <% }) %>
                        </div>
                    <% } else { %>
                        <div class="no-addresses">
                            <i class="fas fa-map-marker-alt"></i>
                            <h3>No Addresses Found</h3>
                            <p>You haven't added any addresses yet. Add your first address to get started.</p>
                            <button class="btn-primary" onclick="showAddAddressModal()">
                                <i class="fas fa-plus"></i>
                                Add Your First Address
                            </button>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

        <%- include('../partials/footer') %>

            <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.14.5/dist/sweetalert2.all.min.js"></script>
            <script>
                function showAddAddressModal() {
                    Swal.fire({
                        title: 'Add New Address',
                        html: `
                    <div style="text-align: left; max-height: 400px; overflow-y: auto;">
                        <form id="addressForm">
                            <div style="margin-bottom: 15px;">
                                <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #374151;">Full Name *</label>
                                <input type="text" id="fullName" name="fullName" required style="width: 100%; padding: 12px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;">
                            </div>
                            <div style="margin-bottom: 15px;">
                                <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #374151;">Phone Number *</label>
                                <input type="text" id="phoneNumber" name="phoneNumber" required style="width: 100%; padding: 12px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;">
                            </div>
                            <div style="margin-bottom: 15px;">
                                <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #374151;">Address Line 1 *</label>
                                <input type="text" id="addressLine1" name="addressLine1" required style="width: 100%; padding: 12px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;">
                            </div>
                            <div style="margin-bottom: 15px;">
                                <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #374151;">Address Line 2</label>
                                <input type="text" id="addressLine2" name="addressLine2" style="width: 100%; padding: 12px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;">
                            </div>
                            <div style="display: flex; gap: 10px; margin-bottom: 15px;">
                                <div style="flex: 1;">
                                    <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #374151;">City *</label>
                                    <input type="text" id="city" name="city" required style="width: 100%; padding: 12px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;">
                                </div>
                                <div style="flex: 1;">
                                    <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #374151;">State *</label>
                                    <input type="text" id="state" name="state" required style="width: 100%; padding: 12px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;">
                                </div>
                            </div>
                            <div style="margin-bottom: 15px;">
                                <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #374151;">Pincode *</label>
                                <input type="text" id="pincode" name="pincode" required style="width: 100%; padding: 12px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;">
                            </div>
                            <div style="margin-bottom: 15px;">
                                <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #374151;">Address Type *</label>
                                <select id="addressType" name="addressType" required style="width: 100%; padding: 12px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;">
                                    <option value="Home">🏠 Home</option>
                                    <option value="Work">💼 Work</option>
                                    <option value="Other">📍 Other</option>
                                </select>
                            </div>
                        </form>
                    </div>
                `,
                        showCancelButton: true,
                        confirmButtonText: 'Add Address',
                        cancelButtonText: 'Cancel',
                        confirmButtonColor: '#3b82f6',
                        cancelButtonColor: '#6b7280',
                        width: 600,
                        preConfirm: () => {
                            const form = document.getElementById('addressForm');
                            const formData = new FormData(form);
                            const data = Object.fromEntries(formData);
                            
                            if (!data.fullName || !data.phoneNumber || !data.addressLine1 || !data.city || !data.state || !data.pincode) {
                                Swal.showValidationMessage('Please fill all required fields');
                                return false;
                            }
                            
                            return data;
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            addAddress(result.value);
                        }
                    });
                }

                async function addAddress(addressData) {
                    try {
                        const response = await fetch('/addresses', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(addressData)
                        });
                        
                        const data = await response.json();
                        
                        if (data.success) {
                            Swal.fire({
                                title: 'Success!',
                                text: data.message,
                                icon: 'success',
                                confirmButtonColor: '#3b82f6'
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                title: 'Error!',
                                text: data.message,
                                icon: 'error',
                                confirmButtonColor: '#3b82f6'
                            });
                        }
                    } catch (error) {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Network error occurred. Please try again.',
                            icon: 'error',
                            confirmButtonColor: '#3b82f6'
                        });
                    }
                }

                async function editAddress(button) {
                    // Get address data from data attributes
                    const addressData = {
                        _id: button.dataset.addressId,
                        fullName: button.dataset.fullName,
                        phoneNumber: button.dataset.phone,
                        addressLine1: button.dataset.addressLine1,
                        addressLine2: button.dataset.addressLine2,
                        city: button.dataset.city,
                        state: button.dataset.state,
                        pincode: button.dataset.pincode,
                        addressType: button.dataset.addressType
                    };

                    console.log('Address data:', addressData); // Debug log

                    Swal.fire({
                        title: 'Edit Address',
                        html: `
                    <form id="editAddressForm" style="text-align: left;">
                        <div style="margin-bottom: 15px;">
                            <label style="display: block; margin-bottom: 5px; font-weight: 600;">Full Name *</label>
                            <input type="text" id="editFullName" name="fullName" value="${addressData.fullName || ''}" required style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                        </div>
                        <div style="margin-bottom: 15px;">
                            <label style="display: block; margin-bottom: 5px; font-weight: 600;">Phone Number *</label>
                            <input type="text" id="editPhoneNumber" name="phoneNumber" value="${addressData.phoneNumber || ''}" required style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                        </div>
                        <div style="margin-bottom: 15px;">
                            <label style="display: block; margin-bottom: 5px; font-weight: 600;">Address Line 1 *</label>
                            <input type="text" id="editAddressLine1" name="addressLine1" value="${addressData.addressLine1 || ''}" required style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                        </div>
                        <div style="margin-bottom: 15px;">
                            <label style="display: block; margin-bottom: 5px; font-weight: 600;">Address Line 2</label>
                            <input type="text" id="editAddressLine2" name="addressLine2" value="${addressData.addressLine2 || ''}" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                        </div>
                        <div style="display: flex; gap: 10px; margin-bottom: 15px;">
                            <div style="flex: 1;">
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">City *</label>
                                <input type="text" id="editCity" name="city" value="${addressData.city || ''}" required style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                            </div>
                            <div style="flex: 1;">
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">State *</label>
                                <input type="text" id="editState" name="state" value="${addressData.state || ''}" required style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                            </div>
                        </div>
                        <div style="margin-bottom: 15px;">
                            <label style="display: block; margin-bottom: 5px; font-weight: 600;">Pincode *</label>
                            <input type="text" id="editPincode" name="pincode" value="${addressData.pincode || ''}" required style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                        </div>
                        <div style="margin-bottom: 15px;">
                            <label style="display: block; margin-bottom: 5px; font-weight: 600;">Address Type *</label>
                            <select id="editAddressType" name="addressType" required style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                                <option value="Home" ${addressData.addressType === 'Home' ? 'selected' : ''}>🏠 Home</option>
                                <option value="Work" ${addressData.addressType === 'Work' ? 'selected' : ''}>💼 Work</option>
                                <option value="Other" ${addressData.addressType === 'Other' ? 'selected' : ''}>📍 Other</option>
                            </select>
                        </div>
                    </form>
                `,
                        showCancelButton: true,
                        confirmButtonText: 'Update Address',
                        cancelButtonText: 'Cancel',
                        confirmButtonColor: '#ff6b6b',
                        cancelButtonColor: '#6c757d',
                        width: 600,
                        preConfirm: () => {
                            const form = document.getElementById('editAddressForm');
                            const formData = new FormData(form);
                            const data = Object.fromEntries(formData);

                            if (!data.fullName || !data.phoneNumber || !data.addressLine1 || !data.city || !data.state || !data.pincode) {
                                Swal.showValidationMessage('Please fill all required fields');
                                return false;
                            }

                            return data;
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            updateAddress(addressData._id, result.value);
                        }
                    });
                }

                async function updateAddress(addressId, addressData) {
                    try {
                        const response = await fetch(`/addresses/${addressId}`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(addressData)
                        });

                        const data = await response.json();

                        if (data.success) {
                            Swal.fire({
                                title: 'Success!',
                                text: data.message,
                                icon: 'success',
                                confirmButtonColor: '#ff6b6b'
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                title: 'Error!',
                                text: data.message,
                                icon: 'error',
                                confirmButtonColor: '#ff6b6b'
                            });
                        }
                    } catch (error) {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Network error occurred. Please try again.',
                            icon: 'error',
                            confirmButtonColor: '#ff6b6b'
                        });
                    }
                }

                async function deleteAddress(addressId) {
                    Swal.fire({
                        title: 'Delete Address',
                        text: 'Are you sure you want to delete this address?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#dc3545',
                        cancelButtonColor: '#6c757d',
                        confirmButtonText: 'Yes, delete it',
                        cancelButtonText: 'Cancel'
                    }).then(async (result) => {
                        if (result.isConfirmed) {
                            try {
                                const response = await fetch(`/addresses/${addressId}`, {
                                    method: 'DELETE'
                                });

                                const data = await response.json();

                                if (data.success) {
                                    Swal.fire({
                                        title: 'Deleted!',
                                        text: data.message,
                                        icon: 'success',
                                        confirmButtonColor: '#ff6b6b'
                                    }).then(() => {
                                        location.reload();
                                    });
                                } else {
                                    Swal.fire({
                                        title: 'Error!',
                                        text: data.message,
                                        icon: 'error',
                                        confirmButtonColor: '#ff6b6b'
                                    });
                                }
                            } catch (error) {
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'Network error occurred. Please try again.',
                                    icon: 'error',
                                    confirmButtonColor: '#ff6b6b'
                                });
                            }
                        }
                    });
                }

                function confirmLogout() {
                    Swal.fire({
                        title: 'Logout',
                        text: 'Are you sure you want to logout?',
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#ff6b6b',
                        cancelButtonColor: '#6c757d',
                        confirmButtonText: 'Yes, logout',
                        cancelButtonText: 'Cancel'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = '/logout';
                        }
                    });
                }
            </script>
    </body>

    </html>