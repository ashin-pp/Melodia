<%- include('../partials/header-common', { title: 'Edit Profile - Melodia' }) %>

    <!-- Croppie CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.css">

    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: #f1f5f9;
            color: #334155;
            line-height: 1.6;
            margin-top: 80px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .page-header {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            border-left: 4px solid #3b82f6;
        }

        .page-title {
            font-size: 1.875rem;
            font-weight: 700;
            color: #1e293b;
            margin-bottom: 0.5rem;
        }

        .page-subtitle {
            color: #64748b;
            font-size: 1rem;
        }

        .profile-grid {
            display: grid;
            grid-template-columns: 280px 1fr;
            gap: 2rem;
        }

        .sidebar {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            height: fit-content;
        }

        .user-card {
            text-align: center;
            padding-bottom: 1.5rem;
            margin-bottom: 1.5rem;
            border-bottom: 1px solid #e2e8f0;
        }

        .avatar {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            margin: 0 auto 1rem;
            overflow: hidden;
            border: 3px solid #e2e8f0;
            position: relative;
        }

        .avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .avatar-placeholder {
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #3b82f6, #1d4ed8);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
            font-weight: 600;
        }

        .user-name {
            font-size: 1.125rem;
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 0.25rem;
        }

        .user-email {
            color: #64748b;
            font-size: 0.875rem;
            margin-bottom: 0.5rem;
        }

        .user-since {
            color: #94a3b8;
            font-size: 0.75rem;
        }

        .nav-menu {
            list-style: none;
        }

        .nav-item {
            margin-bottom: 0.25rem;
        }

        .nav-link {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: #64748b;
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.2s;
            font-weight: 500;
        }

        .nav-link:hover,
        .nav-link.active {
            background: #f1f5f9;
            color: #3b82f6;
            text-decoration: none;
        }

        .nav-link i {
            margin-right: 0.75rem;
            width: 16px;
            font-size: 14px;
        }

        .logout-button {
            width: 100%;
            background: #ef4444;
            color: white;
            border: none;
            padding: 0.75rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            margin-top: 1.5rem;
            font-size: 0.875rem;
        }

        .logout-button:hover {
            background: #dc2626;
        }

        .main-content {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .content-header {
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #e2e8f0;
        }

        .content-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #1e293b;
        }

        .avatar-section {
            background: #f8fafc;
            border-radius: 12px;
            padding: 2rem;
            margin-bottom: 2rem;
            border: 1px solid #e2e8f0;
        }

        .avatar-section h3 {
            font-size: 1.125rem;
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 1rem;
        }

        .avatar-preview {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            margin: 0 auto 1.5rem;
            overflow: hidden;
            border: 3px solid #e2e8f0;
            position: relative;
        }

        .avatar-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .avatar-preview-placeholder {
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #3b82f6, #1d4ed8);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 2rem;
            font-weight: 600;
        }

        .avatar-actions {
            text-align: center;
            display: flex;
            gap: 1rem;
            justify-content: center;
        }

        .btn-primary {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 0.875rem;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary:hover {
            background: #2563eb;
            text-decoration: none;
            color: white;
        }

        .btn-secondary {
            background: #6b7280;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 0.875rem;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-secondary:hover {
            background: #4b5563;
            text-decoration: none;
            color: white;
        }

        .form-section {
            margin-bottom: 2rem;
        }

        .form-section h3 {
            font-size: 1.125rem;
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 1rem;
        }

        .form-grid {
            display: grid;
            gap: 1.5rem;
        }

        .email-field-container {
            display: flex;
            gap: 1rem;
            align-items: end;
        }

        .email-field-container .form-input {
            flex: 1;
        }

        @media (max-width: 640px) {
            .email-field-container {
                flex-direction: column;
                align-items: stretch;
                gap: 0.75rem;
            }
        }

        /* Custom toast notification styles */
        .custom-toast {
            border-radius: 8px !important;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15) !important;
            border: 1px solid #e2e8f0 !important;
            max-width: 350px !important;
            font-size: 14px !important;
        }

        .custom-toast .swal2-title {
            font-size: 16px !important;
            font-weight: 600 !important;
            color: #1e293b !important;
            margin-bottom: 4px !important;
        }

        .custom-toast .swal2-content {
            font-size: 14px !important;
            color: #64748b !important;
            margin: 0 !important;
        }

        .custom-toast.swal2-icon-success {
            background: #f0fdf4 !important;
            border-left: 4px solid #10b981 !important;
        }

        .custom-toast.swal2-icon-error {
            background: #fef2f2 !important;
            border-left: 4px solid #ef4444 !important;
        }

        .custom-toast .swal2-success-ring {
            border-color: #10b981 !important;
        }

        .custom-toast .swal2-success-fix {
            background-color: #10b981 !important;
        }

        .custom-toast .swal2-success [class^='swal2-success-line'] {
            background-color: #10b981 !important;
        }

        .custom-toast .swal2-error-x .swal2-error-line {
            background-color: #ef4444 !important;
        }

        .custom-toast .swal2-timer-progress-bar {
            background: #3b82f6 !important;
        }

        .custom-toast .swal2-icon {
            width: 24px !important;
            height: 24px !important;
            margin: 0 8px 0 0 !important;
        }

        .custom-toast .swal2-icon.swal2-success {
            border-width: 2px !important;
        }

        .custom-toast .swal2-icon.swal2-success [class^='swal2-success-line'] {
            height: 2px !important;
        }

        .custom-toast .swal2-icon.swal2-success .swal2-success-line-tip {
            width: 8px !important;
            left: 2px !important;
            top: 10px !important;
        }

        .custom-toast .swal2-icon.swal2-success .swal2-success-line-long {
            width: 12px !important;
            right: 2px !important;
            top: 6px !important;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .form-label {
            font-weight: 600;
            color: #374151;
            font-size: 0.875rem;
        }

        .form-input {
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 0.75rem 1rem;
            color: #1e293b;
            font-size: 1rem;
            transition: all 0.2s;
        }

        .form-input:focus {
            outline: none;
            border-color: #3b82f6;
            background: white;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .form-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            padding-top: 1.5rem;
            border-top: 1px solid #e2e8f0;
        }

        .btn-cancel {
            background: #f1f5f9;
            color: #64748b;
            border: 1px solid #e2e8f0;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 0.875rem;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-cancel:hover {
            background: #e2e8f0;
            text-decoration: none;
            color: #64748b;
        }

        .email-section {
            background: #f8fafc;
            border-radius: 12px;
            padding: 2rem;
            border: 1px solid #e2e8f0;
        }

        .email-section h3 {
            font-size: 1.125rem;
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 1rem;
        }

        .email-display {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 1rem;
        }

        .email-value {
            color: #1e293b;
            font-weight: 500;
        }

        @media (max-width: 768px) {
            .profile-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }

            .container {
                padding: 1rem;
            }

            .page-header,
            .main-content {
                padding: 1.5rem;
            }

            .avatar-actions {
                flex-direction: column;
            }

            .form-actions {
                flex-direction: column;
            }
        }
    </style>

    <body>
        <div class="container">
            <div class="page-header">
                <h1 class="page-title">Edit Profile</h1>
                <p class="page-subtitle">Update your personal information and profile settings</p>
            </div>

            <div class="profile-grid">
                <div class="sidebar">
                    <div class="user-card">
                        <div class="avatar">
                            <% if (user && user.avatar && user.avatar.url) { %>
                                <img src="<%= user.avatar.url %>" alt="Profile Picture" id="sidebarAvatar">
                                <% } else { %>
                                    <div class="avatar-placeholder" id="sidebarAvatarInitial">
                                        <%= user && user.name ? user.name.charAt(0).toUpperCase() : 'U' %>
                                    </div>
                                    <% } %>
                        </div>
                        <div class="user-name">
                            <%= user && user.name ? user.name : 'User' %>
                        </div>
                        <div class="user-email">
                            <%= user && user.email ? user.email : '' %>
                        </div>
                        <!-- <div class="user-since">
                            Member since <%= user && user.createdOn ? new
                                Date(user.createdOn).toLocaleDateString('en-US', { month: 'long' , year: 'numeric' })
                                : 'Unknown' %>
                        </div> -->
                    </div>

                    <ul class="nav-menu">
                        <li class="nav-item">
                            <a href="/profile" class="nav-link">
                                <i class="fas fa-user"></i>
                                Account Overview
                            </a>
                        </li>
                        <li class="nav-item">
                            <a href="/orders" class="nav-link">
                                <i class="fas fa-shopping-bag"></i>
                                My Orders
                            </a>
                        </li>
                        <li class="nav-item">
                            <a href="/addresses" class="nav-link">
                                <i class="fas fa-map-marker-alt"></i>
                                Addresses
                            </a>
                        </li>
                        <li class="nav-item">
                            <a href="/wallet" class="nav-link">
                                <i class="fas fa-wallet"></i>
                                Wallet
                            </a>
                        </li>
                        <li class="nav-item">
                            <a href="/password" class="nav-link">
                                <i class="fas fa-lock"></i>
                                Password
                            </a>
                        </li>
                        <li class="nav-item">
                            <a href="/wishlist" class="nav-link">
                                <i class="fas fa-heart"></i>
                                Wishlist
                            </a>
                        </li>
                    </ul>

                    <button class="logout-button" onclick="confirmLogout()">
                        <i class="fas fa-sign-out-alt" style="margin-right: 0.5rem;"></i>
                        Logout
                    </button>
                </div>

                <div class="main-content">
                    <div class="content-header">
                        <h2 class="content-title">Edit Profile</h2>
                    </div>

                    <% if (typeof success !=='undefined' && success) { %>
                        <div
                            style="background: #dcfce7; border: 1px solid #bbf7d0; color: #166534; padding: 1rem; border-radius: 8px; margin-bottom: 1.5rem;">
                            <%= success %>
                        </div>
                        <% } %>

                            <% if (typeof error !=='undefined' && error) { %>
                                <div
                                    style="background: #fef2f2; border: 1px solid #fecaca; color: #dc2626; padding: 1rem; border-radius: 8px; margin-bottom: 1.5rem;">
                                    <%= error %>
                                </div>
                                <% } %>

                                    <!-- Avatar Section -->
                                    <div class="avatar-section">
                                        <h3>Profile Picture</h3>
                                        <div class="avatar-preview" id="currentAvatarPreview">
                                            <% if (user && user.avatar && user.avatar.url) { %>
                                                <img src="<%= user.avatar.url %>" alt="Current Avatar"
                                                    id="currentAvatarImg">
                                                <% } else { %>
                                                    <div class="avatar-preview-placeholder" id="currentAvatarInitial">
                                                        <%= user && user.name ? user.name.charAt(0).toUpperCase() : 'U'
                                                            %>
                                                    </div>
                                                    <% } %>
                                        </div>
                                        <div class="avatar-actions">
                                            <button type="button" class="btn-primary" onclick="showAvatarUpload()">
                                                <i class="fas fa-camera"></i>
                                                Change Picture
                                            </button>
                                            <% if (user && user.avatar && user.avatar.url) { %>
                                                <button type="button" class="btn-secondary" onclick="deleteAvatar()">
                                                    <i class="fas fa-trash"></i>
                                                    Remove Picture
                                                </button>
                                                <% } %>
                                        </div>
                                    </div>

                                    <!-- Profile Information Form -->
                                    <div class="form-section">
                                        <h3>Personal Information</h3>
                                        <form action="/profile/edit" method="POST" id="profileForm"
                                            onsubmit="return validateProfileForm(event)">
                                            <div class="form-grid">
                                                <div class="form-group">
                                                    <label class="form-label" for="name">Full Name</label>
                                                    <input type="text" id="name" name="name" class="form-input"
                                                        value="<%= user && user.name ? user.name : '' %>" required
                                                        minlength="2" maxlength="50">
                                                    <div id="nameError"
                                                        style="color: #ef4444; font-size: 0.75rem; margin-top: 0.25rem; display: none;">
                                                    </div>
                                                </div>

                                                <div class="form-group">
                                                    <label class="form-label" for="email">Email Address</label>
                                                    <div class="email-field-container">
                                                        <input type="email" id="email" name="email" class="form-input"
                                                            value="<%= user && user.email ? user.email : '' %>" readonly
                                                            style="background: #f1f5f9; cursor: not-allowed;">
                                                        <button type="button" class="btn-primary"
                                                            onclick="showChangeEmailModal()"
                                                            style="white-space: nowrap;">
                                                            <i class="fas fa-edit"></i>
                                                            Change Email
                                                        </button>
                                                    </div>
                                                </div>

                                                <div class="form-group">
                                                    <label class="form-label" for="phone">Phone Number</label>
                                                    <input type="tel" id="phone" name="phone" class="form-input"
                                                        value="<%= user && user.phone ? user.phone : '' %>"
                                                        pattern="[\+]?[1-9][\d\s\-\(\)]{0,15}"
                                                        title="Please enter a valid phone number">
                                                    <div id="phoneError"
                                                        style="color: #ef4444; font-size: 0.75rem; margin-top: 0.25rem; display: none;">
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="form-actions">
                                                <a href="/profile" class="btn-cancel">
                                                    <i class="fas fa-times"></i>
                                                    Cancel
                                                </a>
                                                <button type="submit" class="btn-primary" id="saveButton">
                                                    <i class="fas fa-save"></i>
                                                    Save Changes
                                                </button>
                                            </div>
                                    </div>
                </div>
            </div>
        </div>

        <%- include('../partials/footer') %>

            <!-- Croppie JS -->
            <script src="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.js"></script>
            <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.14.5/dist/sweetalert2.all.min.js"></script>
            <script>
                // Show success/error messages from URL parameters as toast notifications
                const urlParams = new URLSearchParams(window.location.search);
                const success = urlParams.get('success');
                const error = urlParams.get('error');

                if (success) {
                    Swal.fire({
                        title: 'Success!',
                        text: success,
                        icon: 'success',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 4000,
                        timerProgressBar: true,
                        customClass: {
                            popup: 'custom-toast'
                        },
                        didOpen: (toast) => {
                            toast.addEventListener('mouseenter', Swal.stopTimer);
                            toast.addEventListener('mouseleave', Swal.resumeTimer);
                        }
                    });

                    // Clear URL parameters after showing message
                    const url = new URL(window.location);
                    url.searchParams.delete('success');
                    window.history.replaceState({}, document.title, url.pathname);
                }

                if (error) {
                    Swal.fire({
                        title: 'Error!',
                        text: error,
                        icon: 'error',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 5000,
                        timerProgressBar: true,
                        customClass: {
                            popup: 'custom-toast'
                        },
                        didOpen: (toast) => {
                            toast.addEventListener('mouseenter', Swal.stopTimer);
                            toast.addEventListener('mouseleave', Swal.resumeTimer);
                        }
                    });

                    // Clear URL parameters after showing message
                    const url = new URL(window.location);
                    url.searchParams.delete('error');
                    window.history.replaceState({}, document.title, url.pathname);
                }

                // Ensure form submission works even if validation fails
                document.addEventListener('DOMContentLoaded', function () {
                    const form = document.getElementById('profileForm');
                    const saveButton = document.getElementById('saveButton');

                    if (form && saveButton) {
                        console.log('Form and button found successfully');

                        // Add click handler as backup
                        saveButton.addEventListener('click', function (e) {
                            console.log('Save button clicked');

                            // If it's not a submit button, prevent default and submit form
                            if (this.type !== 'submit') {
                                e.preventDefault();
                                form.submit();
                            }
                        });
                    } else {
                        console.error('Form or button not found:', { form, saveButton });
                    }
                });

                // Avatar upload functionality with Croppie
                let croppieInstance = null;

                function showAvatarUpload() {
                    Swal.fire({
                        title: 'Upload Profile Picture',
                        html: `
                    <div style="text-align: center;">
                        <input type="file" id="avatarInput" accept="image/*" style="display: none;">
                        <button onclick="document.getElementById('avatarInput').click()" class="swal2-confirm swal2-styled" style="margin-bottom: 20px;">
                            <i class="fas fa-upload"></i> Select Image
                        </button>
                        <div id="croppie-container" style="display: none; margin: 20px 0;">
                            <div id="croppie-demo"></div>
                        </div>
                    </div>
                `,
                        showCancelButton: true,
                        confirmButtonText: 'Upload',
                        cancelButtonText: 'Cancel',
                        confirmButtonColor: '#3b82f6',
                        cancelButtonColor: '#6b7280',
                        allowOutsideClick: false,
                        width: 600,
                        didOpen: () => {
                            const input = document.getElementById('avatarInput');
                            const container = document.getElementById('croppie-container');
                            const croppieDemo = document.getElementById('croppie-demo');

                            input.addEventListener('change', function (e) {
                                const file = e.target.files[0];
                                if (file) {
                                    // Validate file type
                                    if (!file.type.startsWith('image/')) {
                                        Swal.showValidationMessage('Please select a valid image file');
                                        return;
                                    }

                                    // Validate file size (max 5MB)
                                    if (file.size > 5 * 1024 * 1024) {
                                        Swal.showValidationMessage('Image size should be less than 5MB');
                                        return;
                                    }

                                    const reader = new FileReader();
                                    reader.onload = function (e) {
                                        container.style.display = 'block';

                                        // Initialize Croppie
                                        croppieInstance = new Croppie(croppieDemo, {
                                            viewport: { width: 200, height: 200, type: 'circle' },
                                            boundary: { width: 300, height: 300 },
                                            showZoomer: true,
                                            enableResize: false,
                                            enableOrientation: true
                                        });

                                        croppieInstance.bind({
                                            url: e.target.result
                                        });
                                    };
                                    reader.readAsDataURL(file);
                                }
                            });
                        },
                        preConfirm: () => {
                            if (!croppieInstance) {
                                Swal.showValidationMessage('Please select and crop an image');
                                return false;
                            }

                            return croppieInstance.result({
                                type: 'blob',
                                size: 'viewport',
                                format: 'jpeg',
                                quality: 0.8
                            });
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            uploadCroppedAvatar(result.value);
                        }
                        // Clean up croppie instance
                        if (croppieInstance) {
                            croppieInstance.destroy();
                            croppieInstance = null;
                        }
                    });
                }

                function uploadCroppedAvatar(blob) {
                    const formData = new FormData();
                    formData.append('avatar', blob, 'avatar.jpg');

                    Swal.fire({
                        title: 'Uploading...',
                        text: 'Please wait while we upload your profile picture',
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    fetch('/profile/upload-avatar', {
                        method: 'POST',
                        body: formData
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`HTTP error! status: ${response.status}`);
                            }

                            return response.text().then(text => {
                                try {
                                    return JSON.parse(text);
                                } catch (e) {
                                    console.error('Failed to parse JSON:', e);
                                    throw new Error('Invalid JSON response');
                                }
                            });
                        })
                        .then(data => {
                            Swal.close();

                            if (data.success) {
                                // Update the avatar preview immediately
                                const avatarPreview = document.getElementById('currentAvatarPreview');
                                const avatarImg = document.getElementById('currentAvatarImg');
                                const avatarInitial = document.getElementById('currentAvatarInitial');

                                // Update sidebar avatar
                                const sidebarAvatar = document.getElementById('sidebarAvatar');
                                const sidebarAvatarInitial = document.getElementById('sidebarAvatarInitial');

                                if (data.avatar && data.avatar.url) {
                                    // Update main avatar preview
                                    if (avatarImg) {
                                        avatarImg.src = data.avatar.url;
                                    } else {
                                        // Replace initial with image
                                        avatarPreview.innerHTML = `<img src="${data.avatar.url}" alt="Current Avatar" id="currentAvatarImg" style="width: 100%; height: 100%; object-fit: cover;">`;
                                    }

                                    // Update sidebar avatar
                                    if (sidebarAvatar) {
                                        sidebarAvatar.src = data.avatar.url;
                                    } else if (sidebarAvatarInitial) {
                                        // Replace initial with image in sidebar
                                        sidebarAvatarInitial.parentElement.innerHTML = `<img src="${data.avatar.url}" alt="Profile" id="sidebarAvatar" style="width: 100%; height: 100%; object-fit: cover;">`;
                                    }

                                    // Update the action buttons to show delete option
                                    const actionsDiv = document.querySelector('.avatar-actions');
                                    if (actionsDiv && !actionsDiv.querySelector('.btn-secondary')) {
                                        actionsDiv.innerHTML += `
                                    <button type="button" class="btn-secondary" onclick="deleteAvatar()">
                                        <i class="fas fa-trash"></i>
                                        Remove Picture
                                    </button>
                                `;
                                    }
                                }

                                Swal.fire({
                                    title: 'Avatar Updated!',
                                    text: 'Profile picture updated successfully!',
                                    icon: 'success',
                                    toast: true,
                                    position: 'top-end',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true,
                                    customClass: {
                                        popup: 'custom-toast'
                                    },
                                    didOpen: (toast) => {
                                        toast.addEventListener('mouseenter', Swal.stopTimer);
                                        toast.addEventListener('mouseleave', Swal.resumeTimer);
                                    }
                                });
                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: data.message || 'Failed to upload profile picture',
                                    icon: 'error',
                                    confirmButtonColor: '#3b82f6'
                                });
                            }
                        })
                        .catch(error => {
                            Swal.close();
                            Swal.fire({
                                title: 'Error!',
                                text: 'Network error occurred. Please try again.',
                                icon: 'error',
                                confirmButtonColor: '#3b82f6'
                            });
                        });
                }

                function deleteAvatar() {
                    Swal.fire({
                        title: 'Remove Profile Picture',
                        text: 'Are you sure you want to remove your profile picture?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#ef4444',
                        cancelButtonColor: '#6b7280',
                        confirmButtonText: 'Yes, remove it',
                        cancelButtonText: 'Cancel'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            Swal.fire({
                                title: 'Removing...',
                                text: 'Please wait while we remove your profile picture',
                                allowOutsideClick: false,
                                didOpen: () => {
                                    Swal.showLoading();
                                }
                            });

                            fetch('/profile/delete-avatar', {
                                method: 'DELETE'
                            })
                                .then(response => response.json())
                                .then(data => {
                                    Swal.close();
                                    if (data.success) {
                                        Swal.fire({
                                            title: 'Avatar Removed!',
                                            text: 'Profile picture has been removed.',
                                            icon: 'success',
                                            toast: true,
                                            position: 'top-end',
                                            showConfirmButton: false,
                                            timer: 3000,
                                            timerProgressBar: true,
                                            customClass: {
                                                popup: 'custom-toast'
                                            },
                                            didOpen: (toast) => {
                                                toast.addEventListener('mouseenter', Swal.stopTimer);
                                                toast.addEventListener('mouseleave', Swal.resumeTimer);
                                            }
                                        });

                                        // Reload after a short delay
                                        setTimeout(() => {
                                            location.reload();
                                        }, 1000);
                                    } else {
                                        Swal.fire({
                                            title: 'Error!',
                                            text: data.message || 'Failed to remove profile picture',
                                            icon: 'error',
                                            confirmButtonColor: '#3b82f6'
                                        });
                                    }
                                })
                                .catch(error => {
                                    Swal.close();
                                    Swal.fire({
                                        title: 'Error!',
                                        text: 'Network error occurred. Please try again.',
                                        icon: 'error',
                                        confirmButtonColor: '#3b82f6'
                                    });
                                });
                        }
                    });
                }

                function showChangeEmailModal() {
                    Swal.fire({
                        title: 'Change Email Address',
                        html: `
                    <div style="text-align: left;">
                        <div style="margin-bottom: 15px;">
                            <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #374151;">Current Email</label>
                            <input type="email" value="<%= user && user.email ? user.email : '' %>" readonly 
                                style="width: 100%; padding: 12px; border: 1px solid #d1d5db; border-radius: 8px; background: #f9fafb; color: #6b7280;">
                        </div>
                        <div style="margin-bottom: 15px;">
                            <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #374151;">New Email Address *</label>
                            <input type="email" id="newEmail" placeholder="Enter new email address" required 
                                style="width: 100%; padding: 12px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;">
                        </div>
                        <div style="background: #f0f9ff; border: 1px solid #bae6fd; border-radius: 8px; padding: 12px; margin-top: 15px;">
                            <p style="margin: 0; font-size: 13px; color: #0369a1;">
                                <i class="fas fa-info-circle" style="margin-right: 5px;"></i>
                                We'll send a verification code to your new email address to confirm the change.
                            </p>
                        </div>
                    </div>
                `,
                        showCancelButton: true,
                        confirmButtonText: 'Send Verification Code',
                        cancelButtonText: 'Cancel',
                        confirmButtonColor: '#3b82f6',
                        cancelButtonColor: '#6b7280',
                        width: 500,
                        preConfirm: () => {
                            const newEmail = document.getElementById('newEmail').value.trim();

                            if (!newEmail) {
                                Swal.showValidationMessage('Please enter a new email address');
                                return false;
                            }

                            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                            if (!emailRegex.test(newEmail)) {
                                Swal.showValidationMessage('Please enter a valid email address');
                                return false;
                            }

                            const currentEmail = '<%= user && user.email ? user.email : "" %>';
                            if (newEmail === currentEmail) {
                                Swal.showValidationMessage('This is already your current email address');
                                return false;
                            }

                            return newEmail;
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            sendEmailOTP(result.value);
                        }
                    });
                }

                async function sendEmailOTP(newEmail) {
                    try {
                        Swal.fire({
                            title: 'Sending Verification Code...',
                            text: 'Please wait while we send the verification code to your new email address.',
                            allowOutsideClick: false,
                            didOpen: () => {
                                Swal.showLoading();
                            }
                        });

                        const response = await fetch('/profile/send-email-otp', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ newEmail })
                        });

                        const data = await response.json();

                        if (data.success) {
                            showOTPVerificationModal(newEmail);
                        } else {
                            Swal.fire({
                                title: 'Error!',
                                text: data.message || 'Failed to send verification code',
                                icon: 'error',
                                confirmButtonColor: '#3b82f6'
                            });
                        }
                    } catch (error) {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Network error occurred. Please try again.',
                            icon: 'error',
                            confirmButtonColor: '#3b82f6'
                        });
                    }
                }

                function showOTPVerificationModal(newEmail) {
                    let countdown = 300; // 5 minutes
                    let countdownInterval;

                    const updateCountdown = () => {
                        const minutes = Math.floor(countdown / 60);
                        const seconds = countdown % 60;
                        const timeString = `${minutes}:${seconds.toString().padStart(2, '0')}`;

                        const timerElement = document.getElementById('otpTimer');
                        if (timerElement) {
                            timerElement.textContent = timeString;
                        }

                        countdown--;

                        if (countdown < 0) {
                            clearInterval(countdownInterval);
                            const timerElement = document.getElementById('otpTimer');
                            if (timerElement) {
                                timerElement.textContent = 'Expired';
                                timerElement.style.color = '#ef4444';
                            }
                        }
                    };

                    Swal.fire({
                        title: 'Enter Verification Code',
                        html: `
                    <div style="text-align: left;">
                        <div style="background: #f0f9ff; border: 1px solid #bae6fd; border-radius: 8px; padding: 15px; margin-bottom: 20px;">
                            <p style="margin: 0; font-size: 14px; color: #0369a1; text-align: center;">
                                <i class="fas fa-envelope" style="margin-right: 5px;"></i>
                                We've sent a 6-digit verification code to:<br>
                                <strong>${newEmail}</strong>
                            </p>
                        </div>
                        <div style="margin-bottom: 15px;">
                            <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #374151;">Verification Code *</label>
                            <input type="text" id="otpCode" placeholder="Enter 6-digit code" maxlength="6" required 
                                style="width: 100%; padding: 12px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 16px; text-align: center; letter-spacing: 2px;">
                        </div>
                        <div style="text-align: center; margin-bottom: 15px;">
                            <p style="margin: 0; font-size: 13px; color: #6b7280;">
                                Code expires in: <span id="otpTimer" style="font-weight: 600; color: #ef4444;">5:00</span>
                            </p>
                        </div>
                        <div style="text-align: center;">
                            <button type="button" id="resendOtpBtn" onclick="resendEmailOTP('${newEmail}')" 
                                style="background: none; border: none; color: #3b82f6; text-decoration: underline; cursor: pointer; font-size: 13px;">
                                Didn't receive the code? Resend
                            </button>
                        </div>
                    </div>
                `,
                        showCancelButton: true,
                        confirmButtonText: 'Verify & Update Email',
                        cancelButtonText: 'Cancel',
                        confirmButtonColor: '#3b82f6',
                        cancelButtonColor: '#6b7280',
                        width: 500,
                        allowOutsideClick: false,
                        didOpen: () => {
                            countdownInterval = setInterval(updateCountdown, 1000);
                            updateCountdown();

                            // Focus on OTP input
                            const otpInput = document.getElementById('otpCode');
                            if (otpInput) {
                                otpInput.focus();

                                // Auto-format OTP input
                                otpInput.addEventListener('input', function (e) {
                                    this.value = this.value.replace(/[^0-9]/g, '');
                                });
                            }
                        },
                        willClose: () => {
                            if (countdownInterval) {
                                clearInterval(countdownInterval);
                            }
                        },
                        preConfirm: () => {
                            const otpCode = document.getElementById('otpCode').value.trim();

                            if (!otpCode) {
                                Swal.showValidationMessage('Please enter the verification code');
                                return false;
                            }

                            if (otpCode.length !== 6) {
                                Swal.showValidationMessage('Please enter a valid 6-digit code');
                                return false;
                            }

                            return { newEmail, otp: otpCode };
                        }
                    }).then((result) => {
                        if (countdownInterval) {
                            clearInterval(countdownInterval);
                        }

                        if (result.isConfirmed) {
                            verifyEmailOTP(result.value.newEmail, result.value.otp);
                        }
                    });
                }

                async function verifyEmailOTP(newEmail, otp) {
                    try {
                        Swal.fire({
                            title: 'Verifying...',
                            text: 'Please wait while we verify your code and update your email address.',
                            allowOutsideClick: false,
                            didOpen: () => {
                                Swal.showLoading();
                            }
                        });

                        const response = await fetch('/profile/verify-email-otp', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ newEmail, otp })
                        });

                        const data = await response.json();

                        if (data.success) {
                            // Update the email field in the form first
                            const emailInput = document.getElementById('email');
                            if (emailInput) {
                                emailInput.value = newEmail;
                            }

                            // Show success toast
                            Swal.fire({
                                title: 'Email Updated!',
                                text: 'Your email address has been updated successfully!',
                                icon: 'success',
                                toast: true,
                                position: 'top-end',
                                showConfirmButton: false,
                                timer: 4000,
                                timerProgressBar: true,
                                customClass: {
                                    popup: 'custom-toast'
                                },
                                didOpen: (toast) => {
                                    toast.addEventListener('mouseenter', Swal.stopTimer);
                                    toast.addEventListener('mouseleave', Swal.resumeTimer);
                                }
                            });

                            // Reload the page after a short delay to reflect changes
                            setTimeout(() => {
                                location.reload();
                            }, 1000);
                        } else {
                            Swal.fire({
                                title: 'Verification Failed',
                                text: data.message || 'Invalid verification code',
                                icon: 'error',
                                confirmButtonColor: '#3b82f6'
                            }).then(() => {
                                // Show the OTP modal again
                                showOTPVerificationModal(newEmail);
                            });
                        }
                    } catch (error) {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Network error occurred. Please try again.',
                            icon: 'error',
                            confirmButtonColor: '#3b82f6'
                        });
                    }
                }

                async function resendEmailOTP(newEmail) {
                    try {
                        const resendBtn = document.getElementById('resendOtpBtn');
                        if (resendBtn) {
                            resendBtn.disabled = true;
                            resendBtn.textContent = 'Sending...';
                        }

                        const response = await fetch('/profile/resend-email-otp', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ newEmail })
                        });

                        const data = await response.json();

                        if (data.success) {
                            // Show success message briefly
                            const resendBtn = document.getElementById('resendOtpBtn');
                            if (resendBtn) {
                                resendBtn.textContent = 'Code sent!';
                                resendBtn.style.color = '#10b981';

                                setTimeout(() => {
                                    resendBtn.disabled = false;
                                    resendBtn.textContent = "Didn't receive the code? Resend";
                                    resendBtn.style.color = '#3b82f6';
                                }, 3000);
                            }
                        } else {
                            const resendBtn = document.getElementById('resendOtpBtn');
                            if (resendBtn) {
                                resendBtn.disabled = false;
                                resendBtn.textContent = "Didn't receive the code? Resend";
                            }

                            // Show error in a small toast
                            Swal.fire({
                                title: 'Error',
                                text: data.message || 'Failed to resend code',
                                icon: 'error',
                                toast: true,
                                position: 'top-end',
                                showConfirmButton: false,
                                timer: 3000
                            });
                        }
                    } catch (error) {
                        const resendBtn = document.getElementById('resendOtpBtn');
                        if (resendBtn) {
                            resendBtn.disabled = false;
                            resendBtn.textContent = "Didn't receive the code? Resend";
                        }

                        Swal.fire({
                            title: 'Error',
                            text: 'Network error occurred',
                            icon: 'error',
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000
                        });
                    }
                }

                function validateProfileForm(event) {
                    console.log('Form validation started'); // Debug log

                    try {
                        const nameInput = document.getElementById('name');
                        const phoneInput = document.getElementById('phone');
                        const nameError = document.getElementById('nameError');
                        const phoneError = document.getElementById('phoneError');

                        let isValid = true;

                        // Reset error displays
                        if (nameError) {
                            nameError.style.display = 'none';
                            nameInput.style.borderColor = '#d1d5db';
                        }
                        if (phoneError) {
                            phoneError.style.display = 'none';
                            phoneInput.style.borderColor = '#d1d5db';
                        }

                        // Validate name
                        const name = nameInput.value.trim();
                        if (!name) {
                            if (nameError) {
                                nameError.textContent = 'Name is required';
                                nameError.style.display = 'block';
                                nameInput.style.borderColor = '#ef4444';
                            }
                            isValid = false;
                        } else if (name.length < 2) {
                            if (nameError) {
                                nameError.textContent = 'Name must be at least 2 characters long';
                                nameError.style.display = 'block';
                                nameInput.style.borderColor = '#ef4444';
                            }
                            isValid = false;
                        } else if (name.length > 50) {
                            if (nameError) {
                                nameError.textContent = 'Name must be less than 50 characters';
                                nameError.style.display = 'block';
                                nameInput.style.borderColor = '#ef4444';
                            }
                            isValid = false;
                        }

                        // Validate phone (if provided)
                        const phone = phoneInput.value.trim();
                        if (phone) {
                            const phoneRegex = /^[\+]?[1-9][\d\s\-\(\)]{0,15}$/;
                            if (!phoneRegex.test(phone)) {
                                if (phoneError) {
                                    phoneError.textContent = 'Please enter a valid phone number';
                                    phoneError.style.display = 'block';
                                    phoneInput.style.borderColor = '#ef4444';
                                }
                                isValid = false;
                            }
                        }

                        // Show loading state if valid
                        if (isValid) {
                            const saveButton = document.getElementById('saveButton');
                            if (saveButton) {
                                saveButton.disabled = true;
                                saveButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
                            }
                        }

                        return isValid;
                    } catch (error) {
                        console.error('Form validation error:', error);
                        // If validation fails, allow form to submit normally
                        return true;
                    }
                }

                function confirmLogout() {
                    Swal.fire({
                        title: 'Logout',
                        text: 'Are you sure you want to logout?',
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#ef4444',
                        cancelButtonColor: '#6b7280',
                        confirmButtonText: 'Yes, logout',
                        cancelButtonText: 'Cancel'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = '/logout';
                        }
                    });
                }
            </script>
    </body>

    </html>