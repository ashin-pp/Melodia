<%- include('../partials/header-common', { title: 'Checkout - Melodia' }) %>

<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Inter', sans-serif;
        background: #f8fafc;
        color: #334155;
        line-height: 1.6;
        margin-top: 80px;
    }

    .checkout-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
        display: grid;
        grid-template-columns: 1fr 400px;
        gap: 2rem;
    }

    .checkout-main {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .section-card {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        border: 1px solid #e5e7eb;
    }

    .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #1e293b;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .section-title i {
        color: #3b82f6;
    }

    /* Address Section */
    .address-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .address-card {
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        padding: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
    }

    .address-card:hover {
        border-color: #3b82f6;
        background: #f8fafc;
    }

    .address-card.selected {
        border-color: #3b82f6;
        background: #eff6ff;
    }

    .address-card.selected::before {
        content: 'âœ“';
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: #3b82f6;
        color: white;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 12px;
        font-weight: 600;
    }

    .address-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 0.5rem;
    }

    .address-name {
        font-weight: 600;
        color: #1e293b;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .default-badge {
        background: #16a34a;
        color: white;
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 10px;
        font-weight: 600;
    }

    .address-actions {
        display: flex;
        gap: 0.5rem;
    }

    .btn-icon {
        background: none;
        border: none;
        color: #64748b;
        cursor: pointer;
        padding: 4px;
        border-radius: 4px;
        transition: all 0.2s;
    }

    .btn-icon:hover {
        background: #f1f5f9;
        color: #3b82f6;
    }

    .address-details {
        color: #64748b;
        font-size: 0.875rem;
        line-height: 1.4;
    }

    .address-phone {
        color: #374151;
        font-weight: 500;
        margin-top: 0.25rem;
    }

    .btn-add-address {
        background: #f8fafc;
        border: 2px dashed #d1d5db;
        border-radius: 8px;
        padding: 1rem;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
        color: #64748b;
    }

    .btn-add-address:hover {
        border-color: #3b82f6;
        background: #eff6ff;
        color: #3b82f6;
    }

    /* Order Items Section */
    .order-items {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .order-item {
        display: flex;
        gap: 1rem;
        padding: 1rem;
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        background: #fafbfc;
    }

    .item-image {
        width: 80px;
        height: 80px;
        border-radius: 8px;
        object-fit: cover;
        background: #f1f5f9;
    }

    .item-details {
        flex: 1;
    }

    .item-name {
        font-weight: 600;
        color: #1e293b;
        margin-bottom: 0.25rem;
    }

    .item-variant {
        color: #64748b;
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
    }

    .item-quantity {
        color: #374151;
        font-size: 0.875rem;
    }

    .item-price {
        text-align: right;
        color: #1e293b;
        font-weight: 600;
    }

    /* Order Summary Sidebar */
    .order-summary {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        border: 1px solid #e5e7eb;
        height: fit-content;
        position: sticky;
        top: 100px;
    }

    .summary-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #1e293b;
        margin-bottom: 1.5rem;
        padding-bottom: 0.75rem;
        border-bottom: 1px solid #e5e7eb;
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.75rem;
        font-size: 0.875rem;
    }

    .summary-row.total {
        font-size: 1rem;
        font-weight: 600;
        color: #1e293b;
        padding-top: 0.75rem;
        border-top: 1px solid #e5e7eb;
        margin-top: 1rem;
    }

    .summary-value {
        font-weight: 500;
    }

    .summary-value.free {
        color: #16a34a;
    }

    .btn-place-order {
        width: 100%;
        background: #3b82f6;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 1rem;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-top: 1.5rem;
    }

    .btn-place-order:hover:not(:disabled) {
        background: #2563eb;
        transform: translateY(-2px);
    }

    .btn-place-order:disabled {
        background: #9ca3af;
        cursor: not-allowed;
        transform: none;
    }

    .payment-methods {
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        background: white;
        overflow: hidden;
        margin-top: 1rem;
    }

    .payment-method {
        position: relative;
        border-bottom: 1px solid #f3f4f6;
        transition: background-color 0.2s ease;
    }

    .payment-method:last-child {
        border-bottom: none;
    }

    .payment-method.active {
        background: #f8fafc;
        cursor: pointer;
    }

    .payment-method.active:hover {
        background: #f1f5f9;
    }

    .payment-method.disabled {
        background: #f9fafb;
        opacity: 0.6;
        cursor: not-allowed;
    }

    .payment-method input[type="radio"] {
        position: absolute;
        opacity: 0;
        cursor: pointer;
        width: 100%;
        height: 100%;
        margin: 0;
        z-index: 1;
    }

    .payment-method.disabled input[type="radio"] {
        cursor: not-allowed;
    }

    .payment-method:has(input[type="radio"]:checked) {
        background: #eff6ff;
        border-left: 4px solid #3b82f6;
    }

    .payment-method:has(input[type="radio"]:checked) .payment-radio {
        background: #3b82f6;
        border-color: #3b82f6;
    }

    .payment-method:has(input[type="radio"]:checked) .payment-radio::after {
        opacity: 1;
    }

    .payment-method label {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem 1.25rem;
        cursor: pointer;
        width: 100%;
        position: relative;
        z-index: 0;
    }

    .payment-method.disabled label {
        cursor: not-allowed;
    }

    .payment-radio {
        width: 18px;
        height: 18px;
        border: 2px solid #d1d5db;
        border-radius: 50%;
        background: white;
        position: relative;
        transition: all 0.2s ease;
        flex-shrink: 0;
    }

    .payment-radio::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 6px;
        height: 6px;
        background: white;
        border-radius: 50%;
        transform: translate(-50%, -50%);
        opacity: 0;
        transition: opacity 0.2s ease;
    }

    .payment-icon {
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f8fafc;
        border: 1px solid #e5e7eb;
        border-radius: 6px;
        font-size: 1.125rem;
        flex-shrink: 0;
    }

    .payment-details {
        flex: 1;
    }

    .payment-name {
        font-weight: 600;
        color: #374151;
        font-size: 0.95rem;
        margin-bottom: 0.25rem;
    }

    .payment-desc {
        font-size: 0.8rem;
        color: #6b7280;
        line-height: 1.4;
    }

    .payment-status {
        font-size: 0.75rem;
        font-weight: 500;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        flex-shrink: 0;
    }

    .payment-status.available {
        background: #dcfce7;
        color: #166534;
    }

    .payment-status.coming-soon {
        background: #fef3c7;
        color: #92400e;
    }

    @media (max-width: 768px) {
        .payment-method label {
            padding: 0.875rem 1rem;
            gap: 0.75rem;
        }
        
        .payment-icon {
            width: 32px;
            height: 32px;
            font-size: 1rem;
        }
        
        .payment-name {
            font-size: 0.9rem;
        }
        
        .payment-desc {
            font-size: 0.75rem;
        }
    }

    /* Modal Styles */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
        background-color: white;
        margin: 5% auto;
        padding: 2rem;
        border-radius: 12px;
        width: 90%;
        max-width: 500px;
        max-height: 80vh;
        overflow-y: auto;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .modal-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #1e293b;
    }

    .close-modal {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: #64748b;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #374151;
    }

    .form-input {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #d1d5db;
        border-radius: 6px;
        font-size: 0.875rem;
        outline: none;
        transition: border-color 0.2s;
    }

    .form-input:focus {
        border-color: #3b82f6;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
    }

    .btn-save {
        background: #3b82f6;
        color: white;
        border: none;
        border-radius: 6px;
        padding: 0.75rem 1.5rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
    }

    .btn-save:hover {
        background: #2563eb;
    }

    .btn-cancel {
        background: #f3f4f6;
        color: #374151;
        border: 1px solid #d1d5db;
        border-radius: 6px;
        padding: 0.75rem 1.5rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        margin-right: 0.5rem;
    }

    .btn-cancel:hover {
        background: #e5e7eb;
    }

    @media (max-width: 768px) {
        .checkout-container {
            grid-template-columns: 1fr;
            padding: 1rem;
        }
        
        .order-summary {
            position: static;
        }
        
        .form-row {
            grid-template-columns: 1fr;
        }
    }
</style>

<div class="checkout-container">
    <!-- Main Checkout Content -->
    <div class="checkout-main">
        <!-- Delivery Address Section -->
        <div class="section-card">
            <h2 class="section-title">
                <i class="fas fa-map-marker-alt"></i>
                Delivery Address
            </h2>
            
            <div class="address-list" id="addressList">
                <% if (addresses && addresses.length > 0) { %>
                    <% addresses.forEach(address => { %>
                        <div class="address-card <%= address.isDefault ? 'selected' : '' %>" 
                             data-address-id="<%= address._id %>">
                            <div class="address-header">
                                <div class="address-name">
                                    <%= address.fullName %>
                                    <% if (address.isDefault) { %>
                                        <span class="default-badge">DEFAULT</span>
                                    <% } %>
                                </div>
                                <div class="address-actions">
                                    <button class="btn-icon edit-address-btn" 
                                            data-address-id="<%= address._id %>"
                                            title="Edit Address">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <% if (!address.isDefault) { %>
                                        <button class="btn-icon delete-address-btn" 
                                                data-address-id="<%= address._id %>"
                                                title="Delete Address">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    <% } %>
                                </div>
                            </div>
                            <div class="address-details">
                                <%= address.addressLine1 %><% if (address.addressLine2) { %>, <%= address.addressLine2 %><% } %><br>
                                <%= address.city %>, <%= address.state %> - <%= address.pincode %><br>
                                <%= address.country %>
                            </div>
                            <div class="address-phone">ðŸ“ž <%= address.phoneNumber %></div>
                        </div>
                    <% }); %>
                <% } %>
                
                <div class="btn-add-address" onclick="openAddressModal()">
                    <i class="fas fa-plus"></i>
                    Add New Address
                </div>
            </div>
        </div>

        <!-- Order Items Section -->
        <div class="section-card">
            <h2 class="section-title">
                <i class="fas fa-box"></i>
                Order Items (<%= cart.items.length %> items)
            </h2>
            
            <div class="order-items">
                <% cart.items.forEach(item => { %>
                    <% 
                    const variant = item.variantId;
                    const product = variant.productId;
                    let productImage = 'https://via.placeholder.com/400x400/f8fafc/64748b?text=No+Image';
                    if (variant.images && variant.images.length > 0) {
                        productImage = typeof variant.images[0] === 'string' ? variant.images[0] : variant.images[0].url;
                    }
                    %>
                    <div class="order-item">
                        <img src="<%= productImage %>" 
                             alt="<%= product.productName %>" 
                             class="item-image"
                             onerror="this.src='https://via.placeholder.com/400x400/f8fafc/64748b?text=No+Image'">
                        
                        <div class="item-details">
                            <div class="item-name"><%= product.productName %></div>
                            <div class="item-variant">
                                Color: <%= variant.color %> â€¢ Brand: <%= product.brand %>
                            </div>
                            <div class="item-quantity">Quantity: <%= item.quantity %></div>
                        </div>
                        
                        <div class="item-price">
                            â‚¹<%= (variant.salePrice * item.quantity).toFixed(2) %>
                            <div style="font-size: 0.75rem; color: #64748b; font-weight: normal;">
                                â‚¹<%= variant.salePrice %> each
                            </div>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>
    </div>

    <!-- Order Summary Sidebar -->
    <div class="order-summary">
        <h3 class="summary-title">Order Summary</h3>
        
        <div class="summary-row">
            <span>Subtotal (<%= cart.items.reduce((sum, item) => sum + item.quantity, 0) %> items)</span>
            <span class="summary-value">â‚¹<%= pricing.subtotal.toFixed(2) %></span>
        </div>
        
        <div class="summary-row">
            <span>Shipping</span>
            <span class="summary-value <%= pricing.shippingCost === 0 ? 'free' : '' %>">
                <%= pricing.shippingCost === 0 ? 'FREE' : 'â‚¹' + pricing.shippingCost.toFixed(2) %>
            </span>
        </div>
        
        <div class="summary-row">
            <span>Tax (GST 18%)</span>
            <span class="summary-value">â‚¹<%= pricing.taxAmount.toFixed(2) %></span>
        </div>
        
        <% if (pricing.offerDiscount > 0) { %>
            <div class="summary-row">
                <span>Offer Discount</span>
                <span class="summary-value" style="color: #16a34a;">-â‚¹<%= pricing.offerDiscount.toFixed(2) %></span>
            </div>
        <% } %>
        
        <% if (pricing.couponDiscount > 0) { %>
            <div class="summary-row">
                <span>Coupon Discount</span>
                <span class="summary-value" style="color: #16a34a;">-â‚¹<%= pricing.couponDiscount.toFixed(2) %></span>
            </div>
        <% } %>
        
        <!-- Coupon Section -->
        <div style="margin: 1rem 0; padding: 1rem; background: #f8fafc; border-radius: 8px; border: 1px solid #e5e7eb;">
            <div id="couponInputSection" style="display: flex; gap: 0.5rem; margin-bottom: 0.5rem;">
                <input type="text" id="couponCode" placeholder="Enter coupon code" 
                       style="flex: 1; padding: 0.5rem; border: 1px solid #d1d5db; border-radius: 4px; font-size: 0.875rem;">
                <button type="button" id="applyCouponBtn" onclick="applyCoupon()" 
                        style="padding: 0.5rem 1rem; background: #3b82f6; color: white; border: none; border-radius: 4px; font-size: 0.875rem; cursor: pointer;">
                    Apply
                </button>
            </div>
            
            <!-- Applied Coupon Display -->
            <div id="appliedCouponSection" style="display: none; background: #dcfce7; border: 1px solid #16a34a; border-radius: 6px; padding: 0.75rem; margin-bottom: 0.5rem;">
                <div style="display: flex; justify-content: between; align-items: center;">
                    <div style="flex: 1;">
                        <div style="font-weight: 600; color: #166534; font-size: 0.875rem;">
                            <i class="fas fa-check-circle" style="color: #16a34a; margin-right: 0.5rem;"></i>
                            Coupon Applied: <span id="appliedCouponCode"></span>
                        </div>
                        <div style="font-size: 0.75rem; color: #166534; margin-top: 0.25rem;" id="appliedCouponDetails">
                            You saved â‚¹<span id="couponSavings">0</span>
                        </div>
                    </div>
                    <button type="button" onclick="removeCoupon()" 
                            style="background: #dc2626; color: white; border: none; border-radius: 4px; padding: 0.25rem 0.5rem; font-size: 0.75rem; cursor: pointer;">
                        <i class="fas fa-times"></i> Remove
                    </button>
                </div>
            </div>
            
            <% if (availableCoupons && availableCoupons.length > 0) { %>
            <div style="margin-top: 0.5rem;" id="viewCouponsSection">
                <button type="button" onclick="showAvailableCoupons()" 
                        style="background: none; border: none; color: #3b82f6; font-size: 0.75rem; cursor: pointer; text-decoration: underline;">
                    View available coupons (<%= availableCoupons.length %>)
                </button>
            </div>
            <% } %>
        </div>
        
        <!-- Wallet Usage Option -->
        <% if (user.wallet && user.wallet.balance > 0) { %>
        <div style="margin: 1rem 0; padding: 1rem; background: #f0f9ff; border-radius: 8px; border: 1px solid #bae6fd;">
            <label style="display: flex; align-items: center; gap: 0.5rem; cursor: pointer;">
                <input type="checkbox" id="useWallet" name="useWallet" style="margin: 0;">
                <span style="font-weight: 500; font-size: 0.875rem;">Use wallet balance</span>
            </label>
            <p style="font-size: 0.75rem; color: #0369a1; margin: 0.25rem 0 0 1.5rem;">
                Available: â‚¹<%= user.wallet.balance.toFixed(2) %>
            </p>
        </div>
        <% } %>
        
        <div class="summary-row total">
            <span>Total Amount</span>
            <span class="summary-value" id="finalTotal">â‚¹<%= pricing.totalAmount.toFixed(2) %></span>
        </div>

        <!-- Payment Methods -->
        <div class="section-card">
            <h2 class="section-title">
                <i class="fas fa-credit-card"></i>
                Payment Method
            </h2>
            
            <div class="payment-methods">
                <div class="payment-method active">
                    <input type="radio" id="cod" name="paymentMethod" value="COD" checked>
                    <label for="cod">
                        <div class="payment-radio"></div>
                        <div class="payment-icon">ðŸ’°</div>
                        <div class="payment-details">
                            <div class="payment-name">Cash on Delivery</div>
                            <div class="payment-desc">Pay when your order is delivered to your doorstep</div>
                        </div>
                        <div class="payment-status available">Available</div>
                    </label>
                </div>
                
                <% if (razorpayKeyId) { %>
                <div class="payment-method active">
                    <input type="radio" id="razorpay" name="paymentMethod" value="razorpay">
                    <label for="razorpay">
                        <div class="payment-radio"></div>
                        <div class="payment-icon">ðŸ’³</div>
                        <div class="payment-details">
                            <div class="payment-name">Online Payment</div>
                            <div class="payment-desc">Card, UPI, Net Banking & more</div>
                        </div>
                        <div class="payment-status available">Available</div>
                    </label>
                </div>
                <% } %>
                
                <% if (user.wallet && user.wallet.balance > 0) { %>
                <div class="payment-method active">
                    <input type="radio" id="wallet" name="paymentMethod" value="wallet">
                    <label for="wallet">
                        <div class="payment-radio"></div>
                        <div class="payment-icon">ðŸ‘›</div>
                        <div class="payment-details">
                            <div class="payment-name">Wallet Payment</div>
                            <div class="payment-desc">Balance: â‚¹<%= user.wallet.balance.toFixed(2) %></div>
                        </div>
                        <div class="payment-status available">Available</div>
                    </label>
                </div>
                <% } %>
                
                <!-- <div class="payment-method disabled">
                    <input type="radio" id="upi" name="paymentMethod" value="UPI" disabled>
                    <label for="upi">
                        <div class="payment-radio"></div>
                        <div class="payment-icon">ðŸ“±</div>
                        <div class="payment-details">
                            <div class="payment-name">UPI Payment</div>
                            <div class="payment-desc">Google Pay, PhonePe, Paytm & more</div>
                        </div>
                        <div class="payment-status coming-soon">Coming Soon</div>
                    </label>
                </div> -->
            </div>
        </div>

        <button class="btn-place-order" id="placeOrderBtn" disabled>
            <i class="fas fa-credit-card"></i>
            Place Order
        </button>
        
        <div style="text-align: center; margin-top: 1rem; font-size: 0.75rem; color: #64748b;">
            <i class="fas fa-shield-alt"></i>
            Safe and secure checkout
        </div>
    </div>
</div>

<!-- Address Modal -->
<div id="addressModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title" id="modalTitle">Add New Address</h3>
            <button class="close-modal" onclick="closeAddressModal()">&times;</button>
        </div>
        
        <form id="addressForm">
            <input type="hidden" id="addressId" name="addressId">
            
            <div class="form-group">
                <label class="form-label">Full Name *</label>
                <input type="text" class="form-input" id="fullName" name="fullName" required>
            </div>
            
            <div class="form-group">
                <label class="form-label">Phone Number *</label>
                <input type="tel" class="form-input" id="phoneNumber" name="phoneNumber" 
                       pattern="[6-9][0-9]{9}" maxlength="10" required>
            </div>
            
            <div class="form-group">
                <label class="form-label">Address Line 1 *</label>
                <input type="text" class="form-input" id="addressLine1" name="addressLine1" required>
            </div>
            
            <div class="form-group">
                <label class="form-label">Address Line 2</label>
                <input type="text" class="form-input" id="addressLine2" name="addressLine2">
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label class="form-label">City *</label>
                    <input type="text" class="form-input" id="city" name="city" required>
                </div>
                <div class="form-group">
                    <label class="form-label">State *</label>
                    <input type="text" class="form-input" id="state" name="state" required>
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label class="form-label">Pincode *</label>
                    <input type="text" class="form-input" id="pincode" name="pincode" 
                           pattern="[1-9][0-9]{5}" maxlength="6" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Address Type</label>
                    <select class="form-input" id="addressType" name="addressType">
                        <option value="Home">Home</option>
                        <option value="Work">Work</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
            </div>
            
            <div style="margin-top: 1.5rem;">
                <button type="button" class="btn-cancel" onclick="closeAddressModal()">Cancel</button>
                <button type="submit" class="btn-save">Save Address</button>
            </div>
        </form>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.14.5/dist/sweetalert2.all.min.js"></script>

<script>
    let selectedAddressId = '';
    
    // Set default address if available
    <% if (typeof addresses !== 'undefined' && addresses && addresses.length > 0) { %>
        <% const defaultAddress = addresses.find(addr => addr.isDefault); %>
        <% if (defaultAddress) { %>
            selectedAddressId = '<%= defaultAddress._id %>';
        <% } %>
    <% } %>
    let isEditMode = false;

    $(document).ready(function() {
        updatePlaceOrderButton();
        
        // Address selection
        $('.address-card').on('click', function() {
            if ($(this).hasClass('btn-add-address')) return;
            
            $('.address-card').removeClass('selected');
            $(this).addClass('selected');
            selectedAddressId = $(this).data('address-id');
            updatePlaceOrderButton();
        });

        // Edit address
        $('.edit-address-btn').on('click', function(e) {
            e.stopPropagation();
            const addressId = $(this).data('address-id');
            editAddress(addressId);
        });

        // Delete address
        $('.delete-address-btn').on('click', function(e) {
            e.stopPropagation();
            const addressId = $(this).data('address-id');
            deleteAddress(addressId);
        });

        // Place order
        $('#placeOrderBtn').on('click', function() {
            if (!selectedAddressId) {
                Swal.fire('Error', 'Please select a delivery address', 'error');
                return;
            }
            placeOrder();
        });

        // Address form submission
        $('#addressForm').on('submit', function(e) {
            console.log('Form submitted');
            e.preventDefault();
            saveAddress();
        });
        
        // Debug: Check if form elements exist
        setTimeout(function() {
            console.log('Checkout page debug:');
            console.log('Address form:', $('#addressForm').length);
            console.log('Save button:', $('button[type="submit"]').length);
            console.log('Modal:', $('#addressModal').length);
            console.log('Address cards:', $('.address-card').length);
            console.log('Selected address ID:', selectedAddressId);
        }, 1000);
    });

    function updatePlaceOrderButton() {
        const btn = $('#placeOrderBtn');
        if (selectedAddressId) {
            btn.prop('disabled', false);
            btn.html('<i class="fas fa-credit-card"></i> Place Order');
        } else {
            btn.prop('disabled', true);
            btn.html('Select Address to Continue');
        }
    }

    function openAddressModal() {
        isEditMode = false;
        $('#modalTitle').text('Add New Address');
        $('#addressForm')[0].reset();
        $('#addressId').val('');
        $('#addressModal').show();
    }

    function closeAddressModal() {
        $('#addressModal').hide();
    }

    function editAddress(addressId) {
        // Get address data from the DOM
        const addressCard = $(`.address-card[data-address-id="${addressId}"]`);
        const addressText = addressCard.find('.address-details').text();
        const fullName = addressCard.find('.address-name').text().replace('DEFAULT', '').trim();
        const phoneNumber = addressCard.find('.address-phone').text().replace('ðŸ“ž ', '');

        isEditMode = true;
        $('#modalTitle').text('Edit Address');
        $('#addressId').val(addressId);
        $('#fullName').val(fullName);
        $('#phoneNumber').val(phoneNumber);
        
        // Parse address details (this is a simplified approach)
        const addressLines = addressText.split('\n');
        if (addressLines.length >= 2) {
            const firstLine = addressLines[0].trim();
            const secondLine = addressLines[1].trim();
            
            $('#addressLine1').val(firstLine.split(',')[0]);
            
            // Parse city, state, pincode
            const locationMatch = secondLine.match(/^(.+),\s*(.+)\s*-\s*(\d{6})$/);
            if (locationMatch) {
                $('#city').val(locationMatch[1].trim());
                $('#state').val(locationMatch[2].trim());
                $('#pincode').val(locationMatch[3].trim());
            }
        }
        
        $('#addressModal').show();
    }

    function saveAddress() {
        console.log('Save address function called');
        
        // Get form data
        const formData = {
            fullName: $('#fullName').val(),
            phoneNumber: $('#phoneNumber').val(),
            addressLine1: $('#addressLine1').val(),
            addressLine2: $('#addressLine2').val(),
            city: $('#city').val(),
            state: $('#state').val(),
            pincode: $('#pincode').val(),
            addressType: $('#addressType').val()
        };
        
        console.log('Form data:', formData);
        
        // Validate required fields
        if (!formData.fullName || !formData.phoneNumber || !formData.addressLine1 || 
            !formData.city || !formData.state || !formData.pincode) {
            Swal.fire('Error', 'Please fill all required fields', 'error');
            return;
        }
        
        // Validate phone number
        if (!/^[6-9]\d{9}$/.test(formData.phoneNumber)) {
            Swal.fire('Error', 'Please enter a valid 10-digit phone number', 'error');
            return;
        }
        
        // Validate pincode
        if (!/^[1-9][0-9]{5}$/.test(formData.pincode)) {
            Swal.fire('Error', 'Please enter a valid 6-digit pincode', 'error');
            return;
        }

        const url = isEditMode ? `/addresses/${$('#addressId').val()}` : '/addresses';
        const method = isEditMode ? 'PUT' : 'POST';
        
        console.log('Making request to:', url, 'Method:', method);
        
        // Disable save button
        const saveBtn = $('button[type="submit"]');
        const originalText = saveBtn.text();
        saveBtn.prop('disabled', true).text('Saving...');

        $.ajax({
            url: url,
            method: method,
            contentType: 'application/json',
            data: JSON.stringify(formData),
            success: function(response) {
                console.log('Success response:', response);
                if (response.success) {
                    Swal.fire({
                        title: 'Success!',
                        text: response.message,
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire('Error', response.message, 'error');
                    saveBtn.prop('disabled', false).text(originalText);
                }
            },
            error: function(xhr, status, error) {
                console.error('AJAX Error:', xhr, status, error);
                console.error('Response:', xhr.responseText);
                
                let errorMessage = 'Failed to save address';
                try {
                    const response = JSON.parse(xhr.responseText);
                    errorMessage = response.message || errorMessage;
                } catch (e) {
                    errorMessage = xhr.responseText || errorMessage;
                }
                
                Swal.fire('Error', errorMessage, 'error');
                saveBtn.prop('disabled', false).text(originalText);
            }
        });
    }

    function deleteAddress(addressId) {
        Swal.fire({
            title: 'Delete Address?',
            text: 'Are you sure you want to delete this address?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc2626',
            cancelButtonColor: '#6b7280',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: `/addresses/${addressId}`,
                    method: 'DELETE',
                    success: function(response) {
                        if (response.success) {
                            Swal.fire({
                                title: 'Deleted!',
                                text: 'Address has been deleted.',
                                icon: 'success',
                                timer: 2000,
                                showConfirmButton: false
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire('Error', response.message, 'error');
                        }
                    },
                    error: function() {
                        Swal.fire('Error', 'Failed to delete address', 'error');
                    }
                });
            }
        });
    }

    // Coupon functionality
    let appliedCoupon = null;
    
    function applyCoupon() {
        const couponCode = $('#couponCode').val().trim().toUpperCase();
        if (!couponCode) {
            Swal.fire('Error', 'Please enter a coupon code', 'error');
            return;
        }
        
        $('#applyCouponBtn').prop('disabled', true).text('Applying...');
        
        // Find coupon in available coupons
        const availableCoupons = <%- JSON.stringify(availableCoupons || []) %>;
        const coupon = availableCoupons.find(c => c.code === couponCode);
        
        if (!coupon) {
            Swal.fire('Error', 'Invalid or expired coupon code', 'error');
            $('#applyCouponBtn').prop('disabled', false).text('Apply');
            return;
        }
        
        appliedCoupon = coupon;
        updatePricing();
        
        // Show applied coupon section
        $('#couponInputSection').hide();
        $('#appliedCouponSection').show();
        $('#viewCouponsSection').hide();
        $('#appliedCouponCode').text(couponCode);
        
        Swal.fire('Success', `Coupon "${couponCode}" applied successfully!`, 'success');
    }
    
    function removeCoupon() {
        appliedCoupon = null;
        updatePricing();
        
        // Show coupon input section
        $('#couponInputSection').show();
        $('#appliedCouponSection').hide();
        $('#viewCouponsSection').show();
        $('#couponCode').val('').prop('disabled', false);
        $('#applyCouponBtn').prop('disabled', false).text('Apply').css('background', '#3b82f6');
        
        Swal.fire('Success', 'Coupon removed successfully!', 'success');
    }
    
    function showAvailableCoupons() {
        const availableCoupons = <%- JSON.stringify(availableCoupons || []) %>;
        let couponsHtml = '<div style="max-height: 300px; overflow-y: auto;">';
        
        availableCoupons.forEach(coupon => {
            const discountText = coupon.discountType === 'percentage' 
                ? `${coupon.discountValue}% off` 
                : `â‚¹${coupon.discountValue} off`;
            
            couponsHtml += `
                <div style="border: 1px solid #e5e7eb; border-radius: 8px; padding: 1rem; margin-bottom: 0.5rem; cursor: pointer;" 
                     onclick="selectCoupon('${coupon.code}')">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <strong style="color: #3b82f6;">${coupon.code}</strong>
                            <p style="margin: 0.25rem 0; font-size: 0.875rem; color: #64748b;">${coupon.name}</p>
                            <p style="margin: 0; font-size: 0.75rem; color: #64748b;">Min order: â‚¹${coupon.minimumOrderAmount}</p>
                        </div>
                        <div style="text-align: right;">
                            <span style="background: #dcfce7; color: #166534; padding: 0.25rem 0.5rem; border-radius: 4px; font-size: 0.75rem; font-weight: 500;">
                                ${discountText}
                            </span>
                        </div>
                    </div>
                </div>
            `;
        });
        
        couponsHtml += '</div>';
        
        Swal.fire({
            title: 'Available Coupons',
            html: couponsHtml,
            width: '500px',
            showConfirmButton: false,
            showCancelButton: true,
            cancelButtonText: 'Close'
        });
    }
    
    function selectCoupon(code) {
        $('#couponCode').val(code);
        Swal.close();
        applyCoupon();
    }
    
    function updatePricing() {
        const subtotal = <%= pricing.subtotal || 0 %>;
        const shippingCost = <%= pricing.shippingCost || 0 %>;
        const taxAmount = <%= pricing.taxAmount || 0 %>;
        const offerDiscount = <%= pricing.offerDiscount || 0 %>;
        
        let couponDiscount = 0;
        if (appliedCoupon) {
            if (appliedCoupon.discountType === 'percentage') {
                couponDiscount = Math.round((subtotal * appliedCoupon.discountValue) / 100);
                if (appliedCoupon.maxDiscountAmount && couponDiscount > appliedCoupon.maxDiscountAmount) {
                    couponDiscount = appliedCoupon.maxDiscountAmount;
                }
            } else {
                couponDiscount = Math.min(appliedCoupon.discountValue, subtotal);
            }
        }
        
        const useWallet = $('#useWallet').is(':checked');
        const walletBalance = <%= (user.wallet && user.wallet.balance) ? user.wallet.balance : 0 %>;
        
        let totalAmount = subtotal + shippingCost + taxAmount - offerDiscount - couponDiscount;
        let walletUsed = 0;
        
        if (useWallet && walletBalance > 0) {
            walletUsed = Math.min(walletBalance, totalAmount);
            totalAmount -= walletUsed;
        }
        
        // Update display
        if (couponDiscount > 0) {
            $('.summary-row:contains("Coupon Discount")').remove();
            $('.summary-row:contains("Tax")').after(`
                <div class="summary-row">
                    <span>Coupon Discount</span>
                    <span class="summary-value" style="color: #16a34a;">-â‚¹${couponDiscount.toFixed(2)}</span>
                </div>
            `);
            // Update coupon savings display
            $('#couponSavings').text(couponDiscount.toFixed(2));
        } else {
            $('.summary-row:contains("Coupon Discount")').remove();
        }
        
        if (walletUsed > 0) {
            $('.summary-row:contains("Wallet Used")').remove();
            $('.summary-row.total').before(`
                <div class="summary-row">
                    <span>Wallet Used</span>
                    <span class="summary-value" style="color: #16a34a;">-â‚¹${walletUsed.toFixed(2)}</span>
                </div>
            `);
        }
        
        $('#finalTotal').text(`â‚¹${totalAmount.toFixed(2)}`);
    }
    
    // Update pricing when wallet checkbox changes
    $('#useWallet').change(updatePricing);

    function placeOrder() {
        const paymentMethod = $('input[name="paymentMethod"]:checked').val();
        const couponCode = appliedCoupon ? appliedCoupon.code : null;
        const useWallet = $('#useWallet').is(':checked');
        
        console.log('Place order called');
        console.log('Selected address ID:', selectedAddressId);
        console.log('Payment method:', paymentMethod);
        console.log('Coupon code:', couponCode);
        console.log('Use wallet:', useWallet);
        
        if (!selectedAddressId) {
            Swal.fire('Error', 'Please select a delivery address', 'error');
            return;
        }
        
        Swal.fire({
            title: 'Confirm Order',
            text: 'Are you sure you want to place this order?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3b82f6',
            cancelButtonColor: '#6b7280',
            confirmButtonText: 'Yes, place order!'
        }).then((result) => {
            if (result.isConfirmed) {
                $('#placeOrderBtn').prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Placing Order...');
                
                const orderData = {
                    addressId: selectedAddressId,
                    paymentMethod: paymentMethod,
                    couponCode: couponCode,
                    useWallet: useWallet
                };
                
                console.log('Sending order data:', orderData);
                
                $.ajax({
                    url: '/checkout/place-order',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(orderData),
                    success: function(response) {
                        if (response.success) {
                            if (response.requiresPayment && paymentMethod === 'razorpay') {
                                // Handle Razorpay payment
                                handleRazorpayPayment(response.razorpayOrder, response.orderData);
                            } else {
                                // Direct success (COD or wallet)
                                window.location.href = `/order-success/${response.orderObjectId}`;
                            }
                        } else {
                            Swal.fire('Error', response.message, 'error');
                            $('#placeOrderBtn').prop('disabled', false).html('<i class="fas fa-credit-card"></i> Place Order');
                        }
                    },
                    error: function(xhr) {
                        const response = xhr.responseJSON;
                        Swal.fire('Error', response?.message || 'Failed to place order', 'error');
                        $('#placeOrderBtn').prop('disabled', false).html('<i class="fas fa-credit-card"></i> Place Order');
                    }
                });
            }
        });
    }

    // Close modal when clicking outside
    window.onclick = function(event) {
        const modal = document.getElementById('addressModal');
        if (event.target === modal) {
            closeAddressModal();
        }
    }
    
    // Razorpay payment handling
    function handleRazorpayPayment(razorpayOrder, orderData) {
        const options = {
            key: razorpayOrder.key,
            amount: razorpayOrder.amount,
            currency: razorpayOrder.currency,
            name: 'Melodia',
            description: 'Order Payment',
            order_id: razorpayOrder.id,
            handler: function(response) {
                // Payment successful
                completeRazorpayOrder(response, orderData);
            },
            prefill: {
                name: '<%= user.firstName %> <%= user.lastName %>',
                email: '<%= user.email %>',
                contact: '<%= user.phoneNumber || "" %>'
            },
            theme: {
                color: '#3b82f6'
            },
            modal: {
                ondismiss: function() {
                    // Payment cancelled
                    $('#placeOrderBtn').prop('disabled', false).html('<i class="fas fa-credit-card"></i> Place Order');
                    Swal.fire('Payment Cancelled', 'Your payment was cancelled. You can try again.', 'info');
                }
            }
        };
        
        const rzp = new Razorpay(options);
        rzp.open();
    }
    
    function completeRazorpayOrder(paymentResponse, orderData) {
        console.log('=== COMPLETING RAZORPAY ORDER ===');
        console.log('Payment Response:', paymentResponse);
        console.log('Order Data:', orderData);
        
        $.ajax({
            url: '/checkout/complete-razorpay',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                razorpayPaymentId: paymentResponse.razorpay_payment_id,
                razorpayOrderId: paymentResponse.razorpay_order_id,
                razorpaySignature: paymentResponse.razorpay_signature,
                orderData: orderData
            }),
            success: function(response) {
                console.log('=== RAZORPAY COMPLETION RESPONSE ===');
                console.log('Response:', response);
                
                if (response.success) {
                    console.log('Success! Redirecting to:', `/order-success/${response.orderObjectId}`);
                    Swal.fire({
                        title: 'Payment Successful!',
                        text: 'Your order has been placed successfully.',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    }).then(() => {
                        window.location.href = `/order-success/${response.orderObjectId}`;
                    });
                } else {
                    console.log('Error in response:', response.message);
                    Swal.fire('Error', response.message, 'error');
                    $('#placeOrderBtn').prop('disabled', false).html('<i class="fas fa-credit-card"></i> Place Order');
                }
            },
            error: function(xhr) {
                console.log('=== RAZORPAY COMPLETION ERROR ===');
                console.log('XHR Status:', xhr.status);
                console.log('XHR Response:', xhr.responseJSON);
                console.log('XHR Text:', xhr.responseText);
                
                const response = xhr.responseJSON;
                Swal.fire('Error', response?.message || 'Failed to complete order', 'error');
                $('#placeOrderBtn').prop('disabled', false).html('<i class="fas fa-credit-card"></i> Place Order');
            }
        });
    }
</script>

<!-- Razorpay SDK -->
<% if (razorpayKeyId) { %>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<% } %>

</body>
</html>