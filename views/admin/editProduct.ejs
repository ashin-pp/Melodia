<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Edit Product - Melodia Admin</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.css" />
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background-color: #f5f5f5; color: #333; }
    .admin-container { min-height: 100vh; display: flex; flex-direction: column; }
    .header { background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%); color: white; padding: 20px; }
    .header-main { display: flex; justify-content: space-between; align-items: center; }
    .brand { font-size: 24px; font-weight: 600; }
    .main-content { display: flex; flex: 1; }
    .sidebar { width: 200px; background-color: #f8f9fa; border-right: 1px solid #e9ecef; }
    .sidebar nav ul { list-style: none; padding: 20px 0; }
    .sidebar nav a { display: flex; align-items: center; padding: 12px 20px; text-decoration: none; color: #6c757d; }
    .sidebar nav a:hover, .sidebar nav li.active a { background-color: #000; color: white; }
    .products-content { flex: 1; padding: 30px; background-color: #fff; }
    .form-container { background: white; border-radius: 12px; padding: 30px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
    .form-group { margin-bottom: 20px; }
    .form-label { display: block; font-weight: 600; color: #2c3e50; margin-bottom: 8px; }
    .required { color: #dc3545; }
    .form-input, .form-select, .form-textarea { width: 100%; padding: 10px 15px; border: 1px solid #ddd; border-radius: 8px; }
    .form-input:focus, .form-select:focus, .form-textarea:focus { outline: none; border-color: #667eea; box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1); }
    .variants-container { background: #f8f9fa; border-radius: 8px; padding: 20px; border: 1px solid #e9ecef; }
    .variant-card { background: white; border-radius: 8px; padding: 20px; margin-bottom: 15px; border: 1px solid #ddd; }
    .variant-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; }
    .variant-title { font-weight: 600; color: #2c3e50; }
    .remove-variant-btn { background: #dc3545; color: white; border: none; border-radius: 6px; padding: 8px 12px; cursor: pointer; }
    .variant-fields { display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 15px; margin-bottom: 15px; }
    .image-upload-area { border: 2px dashed #ddd; border-radius: 8px; padding: 20px; text-align: center; margin-top: 10px; }
    .image-previews { display: grid; grid-template-columns: repeat(auto-fill, minmax(100px, 1fr)); gap: 10px; margin-top: 15px; }
    .image-preview-item { position: relative; border-radius: 8px; overflow: hidden; border: 1px solid #e9ecef; }
    .image-preview-item img { width: 100%; height: 100px; object-fit: cover; }
    .remove-image-btn { position: absolute; top: 5px; right: 5px; background: #dc3545; color: white; border: none; border-radius: 50%; width: 20px; height: 20px; cursor: pointer; font-size: 12px; transition: all 0.3s ease; }
    .remove-image-btn:hover { background: #c82333; transform: scale(1.1); }
    .image-preview-item.deleted { opacity: 0.5; filter: grayscale(100%); }
    .image-preview-item.deleted::after { content: 'DELETED'; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: rgba(220, 53, 69, 0.9); color: white; padding: 4px 8px; border-radius: 4px; font-size: 10px; font-weight: bold; }
    .add-variant-btn { background: #667eea; color: white; padding: 10px 20px; border-radius: 8px; border: none; cursor: pointer; margin-top: 15px; }
    .form-actions { display: flex; justify-content: space-between; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e9ecef; }
    .back-btn { background: #6c757d; color: white; padding: 10px 20px; border-radius: 8px; text-decoration: none; }
    .save-btn { background: #667eea; color: white; padding: 10px 20px; border-radius: 8px; border: none; cursor: pointer; }
    .error-container { background-color: #f8d7da; color: #721c24; border: 1px solid #f1aeb5; border-radius: 8px; padding: 15px; margin-bottom: 20px; }
    .upload-btn { background: #667eea; color: white; padding: 8px 16px; border-radius: 6px; border: none; cursor: pointer; }
  </style>
</head>
<body>
  <div class="admin-container">
    <div class="header">
      <div class="header-main">
        <h1 class="brand">Melodia</h1>
        <div class="user-profile">
          <span class="username">ADMIN</span>
          <i class="fas fa-user-circle"></i>
        </div>
      </div>
    </div>

    <div class="main-content">
      <div class="sidebar">
        <nav>
          <ul>
             <li><a href="/admin/dashboard"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
            <li class="active"><a href="/admin/products"><i class="fas fa-box"></i> Products</a></li>
            <li><a href="/admin/orders"><i class="fas fa-list"></i> Order Lists</a></li>
            <li><a href="/admin/customer"><i class="fas fa-users"></i>Users</a></li>
             <li><a href="/admin/sales-report"><i class="fas fa-chart-bar"></i> Sales Report</a></li>
            <li><a href="/admin/coupons"><i class="fas fa-tags"></i> Coupons</a></li>
            <li><a href="/admin/category"><i class="fas fa-folder"></i> Category</a></li>
            <li><a href="/admin/banners"><i class="fas fa-flag"></i> Banners</a></li>
            <li><a href="/admin/settings"><i class="fas fa-cog"></i> Settings</a></li>
            <li><a href="/admin/logout"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
          </ul>
        </nav>
      </div>

      <div class="products-content">
        <div class="page-header">
          <h2>Edit Product</h2>
        </div>

        <div class="form-container">
          <form id="editProductForm" action="/admin/products/<%= product._id %>/edit" method="POST" enctype="multipart/form-data">
            <div class="form-group">
              <label class="form-label">Product Name <span class="required">*</span></label>
              <input type="text" name="productName" required value="<%= product.productName %>" class="form-input"/>
            </div>

            <div class="form-group">
              <label class="form-label">Brand <span class="required">*</span></label>
              <input type="text" name="brand" required value="<%= product.brand %>" class="form-input"/>
            </div>

            <div class="form-group">
              <label class="form-label">Category <span class="required">*</span></label>
              <select name="categoryId" required class="form-select">
                <% categories.forEach(cat => { %>
                  <option value="<%= cat._id %>" <%= product.categoryId._id.toString() === cat._id.toString() ? 'selected' : '' %>>
                    <%= cat.name %>
                  </option>
                <% }) %>
              </select>
            </div>

            <div class="form-group">
              <label class="form-label">Description <span class="required">*</span></label>
              <textarea name="description" rows="4" required class="form-textarea"><%= product.description %></textarea>
            </div>

            <div class="form-group">
              <label class="form-label">Offer (%)</label>
              <input type="number" min="0" max="100" name="offer" value="<%= product.offer || 0 %>" class="form-input"/>
            </div>

            <div class="form-group">
              <label class="form-label">Type</label>
              <select name="type" class="form-select">
                <option value="">-- Select Type --</option>
                <option value="Wireless" <%= (product.type && product.type === 'Wireless') ? 'selected' : '' %>>Wireless</option>
                <option value="Wired" <%= (product.type && product.type === 'Wired') ? 'selected' : '' %>>Wired</option>
                <option value="Bluetooth" <%= (product.type && product.type === 'Bluetooth') ? 'selected' : '' %>>Bluetooth</option>
                <option value="Gaming" <%= (product.type && product.type === 'Gaming') ? 'selected' : '' %>>Gaming</option>
                <option value="Studio" <%= (product.type && product.type === 'Studio') ? 'selected' : '' %>>Studio</option>
              </select>
            </div>

            <div class="form-group">
              <label class="form-label">Battery Health (%)</label>
              <input type="text" name="batteryHealth" value="<%= product.batteryHealth || '' %>" class="form-input" placeholder="Enter battery health (any value)"/>
            </div>

            <div class="form-group">
              <label class="form-label">Status</label>
              <select name="isListed" class="form-select">
                <option value="true" <%= product.isListed ? 'selected' : '' %>>Listed</option>
                <option value="false" <%= !product.isListed ? 'selected' : '' %>>Unlisted</option>
              </select>
            </div>
            
            <!-- Variants Section -->
            <div class="form-group">
              <label class="form-label">Product Variants <span class="required">*</span></label>
              <div class="variants-container">
                <div id="variants-area">
                  <% product.variants.forEach((variant, i) => { %>
                    <div class="variant-card">
                      <div class="variant-header">
                        <h4 class="variant-title">Variant <%= i + 1 %> - <%= variant.color %></h4>
                      </div>
                      
                      <div class="variant-fields">
                        <div>
                          <label class="form-label">Color</label>
                          <input type="text" name="variants[<%= i %>][color]" required class="form-input" value="<%= variant.color %>">
                          <input type="hidden" name="variants[<%= i %>][_id]" value="<%= variant._id %>">
                        </div>
                        <div>
                          <label class="form-label">Price</label>
                          <input type="number" name="variants[<%= i %>][price]" required min="0" step="0.01" class="form-input" value="<%= variant.regularPrice %>">
                        </div>
                        <div>
                          <label class="form-label">Stock</label>
                          <input type="number" name="variants[<%= i %>][stock]" min="0" class="form-input" value="<%= variant.stock %>">
                        </div>
                      </div>

                      <div>
                        <label class="form-label">Current Images</label>
                        <div class="image-previews" id="existing-preview-<%= i %>">
                          <% if (variant.images && variant.images.length > 0) { %>
                            <% variant.images.forEach((img, imgIndex) => { %>
                              <div class="image-preview-item" data-variant-id="<%= variant._id %>" data-image-index="<%= imgIndex %>">
                                <img src="<%= typeof img === 'string' ? img : img.url %>" alt="Variant image" style="width: 100%; height: 100px; object-fit: cover;">
                                <button type="button" onclick="removeExistingImage(this, '<%= variant._id %>', '<%= imgIndex %>')" class="remove-image-btn" title="Remove Image">×</button>
                              </div>
                            <% }) %>
                          <% } else { %>
                            <p style="color: #666; font-style: italic;">No images uploaded for this variant</p>
                          <% } %>
                        </div>
                        
                        <div class="image-upload-area">
                          <input type="file" id="file-input-<%= i %>" accept="image/*" style="display: none;" onchange="openCroppie(this, <%= i %>)">
                          <button type="button" onclick="document.getElementById('file-input-<%= i %>').click()" class="upload-btn">
                            <i class="fas fa-upload"></i> Add Image (Crop & Resize)
                          </button>
                        </div>
                        <div class="image-previews" id="new-preview-<%= i %>"></div>
                        <input type="file" name="variants[<%= i %>][newImages]" multiple style="display: none;" id="final-images-<%= i %>">
                      </div>
                    </div>
                  <% }) %>
                </div>
                <button type="button" id="add-variant-btn" class="add-variant-btn">
                  <i class="fas fa-plus"></i> Add New Variant
                </button>
              </div>
            </div>
            
            <div class="form-actions">
              <a href="/admin/products" class="back-btn">
                <i class="fas fa-arrow-left"></i> Back to Products
              </a>
              <button type="submit" class="save-btn">
                <i class="fas fa-save"></i> Update Product
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Croppie Modal -->
  <div id="cropper-modal" class="cropper-modal hidden">
    <div class="cropper-content">
      <div class="cropper-header">
        <h3>Crop & Resize Image</h3>
        <button type="button" id="close-cropper-btn" class="close-cropper">&times;</button>
      </div>
      <div class="cropper-body">
        <div class="cropper-image-container">
          <div id="croppie-container" style="width: 100%; height: 400px;"></div>
        </div>
        <div class="cropper-preview-container">
          <h4 style="margin-bottom: 10px; font-weight: 600;">Actions</h4>
          <div style="margin-bottom: 15px;">
            <button type="button" id="rotate-left" class="rotate-btn">
              <i class="fas fa-undo"></i> Rotate Left
            </button>
            <button type="button" id="rotate-right" class="rotate-btn">
              <i class="fas fa-redo"></i> Rotate Right
            </button>
          </div>
          <button type="button" id="save-cropped-btn" class="save-cropped-btn">
            <i class="fas fa-check"></i> Save Cropped Image
          </button>
        </div>
      </div>
    </div>
  </div>

  <style>
    .cropper-modal { position: fixed; inset: 0; background: rgba(0, 0, 0, 0.8); z-index: 1000; display: flex; align-items: center; justify-content: center; }
    .cropper-modal.hidden { display: none; }
    .cropper-content { background: white; border-radius: 12px; padding: 24px; max-width: 90vw; max-height: 90vh; width: 800px; }
    .cropper-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; }
    .cropper-header h3 { font-size: 18px; font-weight: 600; color: #2c3e50; }
    .close-cropper { background: none; border: none; font-size: 24px; cursor: pointer; color: #6c757d; }
    .cropper-body { display: flex; gap: 20px; }
    .cropper-image-container { flex: 2; }
    .cropper-preview-container { flex: 1; }
    .rotate-btn { background: #6c757d; color: white; padding: 6px 10px; border-radius: 4px; font-size: 12px; border: none; cursor: pointer; margin-right: 8px; }
    .save-cropped-btn { width: 100%; background: #667eea; color: white; padding: 10px; border-radius: 8px; font-weight: 600; cursor: pointer; border: none; }
  </style>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.js"></script>
  <script>
    let variantCount = <%= product.variants.length %>;
    let croppieInstance = null;
    let currentVariantIndex = 0;
    const variantImages = {};
    const deletedImages = []; // Track deleted images
    
    console.log('Initial variant count:', variantCount);
    console.log('Product data:', {
      name: '<%= product.productName %>',
      type: '<%= product.type || "Not set" %>',
      batteryHealth: '<%= product.batteryHealth || "Not set" %>'
    });

    function openCroppie(input, variantIndex) {
      if (input.files && input.files[0]) {
        currentVariantIndex = variantIndex;
        const file = input.files[0];
        
        if (!file.type.startsWith('image/')) {
          Swal.fire('Error', 'Please select a valid image file', 'error');
          return;
        }

        const reader = new FileReader();
        reader.onload = function(e) {
          showCroppieModal(e.target.result);
        };
        reader.readAsDataURL(file);
      }
    }

    function showCroppieModal(imageSrc) {
      const modal = document.getElementById('cropper-modal');
      modal.classList.remove('hidden');
      
      setTimeout(() => {
        if (croppieInstance) {
          croppieInstance.destroy();
        }

        const container = document.getElementById('croppie-container');
        container.innerHTML = '';
        
        croppieInstance = new Croppie(container, {
          viewport: { width: 300, height: 300, type: 'square' },
          boundary: { width: 400, height: 400 },
          showZoomer: true,
          enableOrientation: true,
          enableResize: false,
          enableExif: true,
          quality: 0.9,
          format: 'jpeg'
        });

        croppieInstance.bind({ url: imageSrc });
      }, 300);
    }

    function hideCroppieModal() {
      document.getElementById('cropper-modal').classList.add('hidden');
      if (croppieInstance) {
        croppieInstance.destroy();
        croppieInstance = null;
      }
    }

    function saveCroppedImage() {
      if (!croppieInstance) return;

      croppieInstance.result({
        type: 'blob',
        size: { width: 800, height: 800 },
        format: 'jpeg',
        quality: 0.9
      }).then(function(blob) {
        if (!variantImages[currentVariantIndex]) {
          variantImages[currentVariantIndex] = [];
        }
        
        // Add only one image
        variantImages[currentVariantIndex].push(blob);
        updateVariantImages(currentVariantIndex);
        updateHiddenInput(currentVariantIndex);
        
        // Reset file input to prevent duplicate uploads
        const fileInput = document.getElementById(`file-input-${currentVariantIndex}`) || 
                          document.getElementById(`new-file-input-${currentVariantIndex}`);
        if (fileInput) {
          fileInput.value = '';
        }
        
        Swal.fire({
          toast: true,
          position: 'top-end',
          icon: 'success',
          title: `Image added to variant ${currentVariantIndex + 1}`,
          showConfirmButton: false,
          timer: 2000
        });
        
        hideCroppieModal();
      }).catch(function(error) {
        console.error('Error saving cropped image:', error);
        Swal.fire('Error', 'Failed to save cropped image', 'error');
      });
    }

    function updateVariantImages(variantIndex) {
      const previewContainer = document.getElementById(`new-preview-${variantIndex}`) || document.getElementById(`variant-preview-${variantIndex}`);
      if (!previewContainer) return;
      
      // Clear existing previews first
      previewContainer.innerHTML = '';
      
      if (variantImages[variantIndex]) {
        variantImages[variantIndex].forEach((blob, index) => {
          const imageUrl = URL.createObjectURL(blob);
          const imageHtml = `
            <div class="image-preview-item">
              <img src="${imageUrl}" alt="New image ${index + 1}" style="width: 100%; height: 100px; object-fit: cover;">
              <button type="button" onclick="removeNewVariantImage(${variantIndex}, ${index})" class="remove-image-btn" title="Remove Image">×</button>
            </div>
          `;
          previewContainer.insertAdjacentHTML('beforeend', imageHtml);
        });
      }
    }

    function updateHiddenInput(variantIndex) {
      const dataTransfer = new DataTransfer();
      if (variantImages[variantIndex]) {
        variantImages[variantIndex].forEach((blob, i) => {
          const file = new File([blob], `variant-${variantIndex}-image-${i + 1}.jpg`, { 
            type: 'image/jpeg',
            lastModified: Date.now()
          });
          dataTransfer.items.add(file);
        });
      }
      
      const hiddenInput = document.getElementById(`final-images-${variantIndex}`) || document.getElementById(`new-final-images-${variantIndex}`);
      if (hiddenInput) {
        hiddenInput.files = dataTransfer.files;
      }
    }

    function removeVariantImage(variantIndex, imageIndex) {
      if (variantImages[variantIndex]) {
        variantImages[variantIndex].splice(imageIndex, 1);
        updateVariantImages(variantIndex);
        updateHiddenInput(variantIndex);
      }
    }

    function removeNewVariantImage(variantIndex, imageIndex) {
      console.log('Removing new variant image:', variantIndex, imageIndex);
      
      if (variantImages[variantIndex]) {
        // Remove the blob from memory
        const blob = variantImages[variantIndex][imageIndex];
        if (blob) {
          URL.revokeObjectURL(URL.createObjectURL(blob));
        }
        
        variantImages[variantIndex].splice(imageIndex, 1);
        updateVariantImages(variantIndex);
        updateHiddenInput(variantIndex);
        
        Swal.fire({
          toast: true,
          position: 'top-end',
          icon: 'info',
          title: 'Image removed',
          showConfirmButton: false,
          timer: 1500
        });
      }
    }

    async function removeExistingImage(button, variantId, imageIndex) {
      console.log('Removing image:', variantId, imageIndex);
      
      const result = await Swal.fire({
        title: 'Remove Image?',
        text: 'Are you sure you want to remove this image?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#dc3545',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, Remove',
        cancelButtonText: 'Cancel'
      });

      if (result.isConfirmed) {
        // Add to deleted images list
        deletedImages.push({
          variantId: variantId,
          imageIndex: parseInt(imageIndex)
        });
        
        console.log('Deleted images list:', deletedImages);
        
        // Add visual feedback instead of removing from DOM
        const imageItem = button.closest('.image-preview-item');
        imageItem.style.opacity = '0.5';
        imageItem.style.filter = 'grayscale(100%)';
        button.style.display = 'none';
        
        // Add deleted overlay
        const overlay = document.createElement('div');
        overlay.innerHTML = 'DELETED';
        overlay.style.cssText = 'position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: rgba(220, 53, 69, 0.9); color: white; padding: 4px 8px; border-radius: 4px; font-size: 10px; font-weight: bold; pointer-events: none;';
        imageItem.appendChild(overlay);
        
        // Show success message
        Swal.fire({
          toast: true,
          position: 'top-end',
          icon: 'success',
          title: 'Image marked for deletion',
          showConfirmButton: false,
          timer: 2000
        });
      }
    }

    function undoDeleteImage(variantId, imageIndex) {
      // Remove from deleted images list
      const deleteIndex = deletedImages.findIndex(item => 
        item.variantId === variantId && item.imageIndex === imageIndex
      );
      
      if (deleteIndex > -1) {
        deletedImages.splice(deleteIndex, 1);
        
        // Remove visual feedback
        const imageItem = document.querySelector(`[data-variant-id="${variantId}"][data-image-index="${imageIndex}"]`);
        if (imageItem) {
          imageItem.classList.remove('deleted');
          imageItem.querySelector('.remove-image-btn').style.display = 'block';
        }
        
        Swal.fire({
          toast: true,
          position: 'top-end',
          icon: 'info',
          title: 'Image deletion cancelled',
          showConfirmButton: false,
          timer: 2000
        });
      }
    }

    // Event listeners
    document.getElementById('close-cropper-btn').addEventListener('click', hideCroppieModal);
    document.getElementById('save-cropped-btn').addEventListener('click', saveCroppedImage);
    document.getElementById('rotate-left').addEventListener('click', () => croppieInstance && croppieInstance.rotate(-90));
    document.getElementById('rotate-right').addEventListener('click', () => croppieInstance && croppieInstance.rotate(90));

    function addNewVariant() {
      const variantHtml = `
        <div class="variant-card">
          <div class="variant-header">
            <h4 class="variant-title">New Variant ${variantCount + 1}</h4>
            <button type="button" onclick="removeVariant(this)" class="remove-variant-btn">
              <i class="fas fa-times"></i> Remove
            </button>
          </div>
          
          <div class="variant-fields">
            <div>
              <label class="form-label">Color</label>
              <input type="text" name="variants[${variantCount}][color]" required class="form-input" placeholder="e.g., Red, Blue">
            </div>
            <div>
              <label class="form-label">Price</label>
              <input type="number" name="variants[${variantCount}][price]" required min="0" step="0.01" class="form-input" placeholder="0.00">
            </div>
            <div>
              <label class="form-label">Stock</label>
              <input type="number" name="variants[${variantCount}][stock]" min="0" class="form-input" placeholder="0">
            </div>
          </div>

          <div>
            <label class="form-label">Variant Images (Min 2 required)</label>
            <div class="image-upload-area">
              <input type="file" id="new-file-input-${variantCount}" accept="image/*" style="display: none;" onchange="openCroppie(this, ${variantCount})">
              <button type="button" onclick="document.getElementById('new-file-input-${variantCount}').click()" class="upload-btn">
                <i class="fas fa-upload"></i> Add Image (Crop & Resize)
              </button>
            </div>
            <div class="image-previews" id="variant-preview-${variantCount}"></div>
            <input type="file" name="variants[${variantCount}][images]" multiple style="display: none;" id="new-final-images-${variantCount}">
          </div>
        </div>
      `;
      
      document.getElementById('variants-area').insertAdjacentHTML('beforeend', variantHtml);
      variantCount++;
    }

    async function removeVariant(btn) {
      const result = await Swal.fire({
        title: 'Remove Variant?',
        text: 'Are you sure you want to remove this variant?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#dc3545',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, Remove',
        cancelButtonText: 'Cancel'
      });

      if (result.isConfirmed) {
        btn.closest('.variant-card').remove();
      }
    }

    function handleVariantImages(input, variantIndex) {
      const previewContainer = document.getElementById(`variant-preview-${variantIndex}`);
      previewContainer.innerHTML = '';
      
      if (input.files.length < 2) {
        Swal.fire({
          title: 'Insufficient Images',
          text: 'Please select at least 2 images for this variant',
          icon: 'warning',
          confirmButtonColor: '#ffc107'
        });
        return;
      }
      
      Array.from(input.files).forEach((file, index) => {
        const reader = new FileReader();
        reader.onload = function(e) {
          const imageHtml = `
            <div class="image-preview-item">
              <img src="${e.target.result}" alt="Variant image ${index + 1}">
              <button type="button" onclick="removeVariantImage(this)" class="remove-image-btn">×</button>
            </div>
          `;
          previewContainer.insertAdjacentHTML('beforeend', imageHtml);
        };
        reader.readAsDataURL(file);
      });
    }

    function removeVariantImage(btn) {
      btn.closest('.image-preview-item').remove();
    }

    function handleNewImages(input, variantIndex) {
      const previewContainer = document.getElementById(`new-preview-${variantIndex}`);
      previewContainer.innerHTML = '';
      
      Array.from(input.files).forEach((file, index) => {
        const reader = new FileReader();
        reader.onload = function(e) {
          const imageHtml = `
            <div class="image-preview-item">
              <img src="${e.target.result}" alt="New image ${index + 1}">
              <button type="button" onclick="removeNewImage(this)" class="remove-image-btn">×</button>
            </div>
          `;
          previewContainer.insertAdjacentHTML('beforeend', imageHtml);
        };
        reader.readAsDataURL(file);
      });
    }

    function removeNewImage(btn) {
      btn.closest('.image-preview-item').remove();
    }

    // Add variant button event listener
    document.getElementById('add-variant-btn').addEventListener('click', addNewVariant);

    // Form submission
    document.getElementById('editProductForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const formData = new FormData(this);
      
      // Add deleted images data
      console.log('Submitting with deleted images:', deletedImages);
      formData.append('deletedImages', JSON.stringify(deletedImages));
      
      try {
        const response = await fetch(this.action, {
          method: 'POST',
          body: formData
        });
        
        const result = await response.json();
        
        if (result.success) {
          Swal.fire({
            title: 'Success!',
            text: 'Product updated successfully!',
            icon: 'success',
            confirmButtonColor: '#28a745'
          }).then(() => {
            window.location.href = '/admin/products';
          });
        } else {
          Swal.fire({
            title: 'Error!',
            text: result.message,
            icon: 'error',
            confirmButtonColor: '#dc3545'
          });
        }
      } catch (error) {
        console.error('Error:', error);
        Swal.fire({
          title: 'Error!',
          text: 'An error occurred while updating the product',
          icon: 'error',
          confirmButtonColor: '#dc3545'
        });
      }
    });
  </script>
</body>
</html>