<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add Product - Melodia Admin</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.css" />
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f5f5f5;
      color: #333;
    }

    .admin-container {
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    .header {
      background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
      color: white;
      padding: 20px;
    }

    .header-main {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .brand {
      font-size: 24px;
      font-weight: 600;
    }

    .main-content {
      display: flex;
      flex: 1;
    }

    .sidebar {
      width: 200px;
      background-color: #f8f9fa;
      border-right: 1px solid #e9ecef;
    }

    .sidebar nav ul {
      list-style: none;
      padding: 20px 0;
    }

    .sidebar nav a {
      display: flex;
      align-items: center;
      padding: 12px 20px;
      text-decoration: none;
      color: #6c757d;
    }

    .sidebar nav a:hover,
    .sidebar nav li.active a {
      background-color: #000;
      color: white;
    }

    .products-content {
      flex: 1;
      padding: 30px;
      background-color: #fff;
    }

    .form-container {
      background: white;
      border-radius: 12px;
      padding: 30px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .form-group {
      margin-bottom: 20px;
    }

    .form-label {
      display: block;
      font-weight: 600;
      color: #2c3e50;
      margin-bottom: 8px;
    }

    .required {
      color: #dc3545;
    }

    .form-input,
    .form-select,
    .form-textarea {
      width: 100%;
      padding: 10px 15px;
      border: 1px solid #ddd;
      border-radius: 8px;
    }

    .form-input:focus,
    .form-select:focus,
    .form-textarea:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .variants-container {
      background: #f8f9fa;
      border-radius: 8px;
      padding: 20px;
      border: 1px solid #e9ecef;
    }

    .variant-card {
      background: white;
      border-radius: 8px;
      padding: 20px;
      margin-bottom: 15px;
      border: 1px solid #ddd;
    }

    .variant-header {
      display: flex;
      justify-content: between;
      align-items: center;
      margin-bottom: 15px;
    }

    .variant-title {
      font-weight: 600;
      color: #2c3e50;
    }

    .remove-variant-btn {
      background: #dc3545;
      color: white;
      border: none;
      border-radius: 6px;
      padding: 8px 12px;
      cursor: pointer;
    }

    .variant-fields {
      display: grid;
      grid-template-columns: 1fr 1fr 1fr;
      gap: 15px;
      margin-bottom: 15px;
    }

    .image-upload-area {
      border: 2px dashed #ddd;
      border-radius: 8px;
      padding: 20px;
      text-align: center;
      margin-top: 10px;
    }

    .image-upload-area:hover {
      border-color: #667eea;
      background: #f0f4ff;
    }

    .upload-btn {
      background: #667eea;
      color: white;
      padding: 10px 20px;
      border-radius: 8px;
      border: none;
      cursor: pointer;
    }

    .image-previews {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
      gap: 10px;
      margin-top: 15px;
    }

    .image-preview-item {
      position: relative;
      border-radius: 8px;
      overflow: hidden;
      border: 1px solid #e9ecef;
    }

    .image-preview-item img {
      width: 100%;
      height: 100px;
      object-fit: cover;
    }

    .remove-image-btn {
      position: absolute;
      top: 5px;
      right: 5px;
      background: #dc3545;
      color: white;
      border: none;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      cursor: pointer;
      font-size: 12px;
    }

    .add-variant-btn {
      background: #667eea;
      color: white;
      padding: 10px 20px;
      border-radius: 8px;
      border: none;
      cursor: pointer;
      margin-top: 15px;
    }

    .form-actions {
      display: flex;
      justify-content: space-between;
      margin-top: 30px;
      padding-top: 20px;
      border-top: 1px solid #e9ecef;
    }

    .back-btn {
      background: #6c757d;
      color: white;
      padding: 10px 20px;
      border-radius: 8px;
      text-decoration: none;
    }

    .save-btn {
      background: #667eea;
      color: white;
      padding: 10px 20px;
      border-radius: 8px;
      border: none;
      cursor: pointer;
    }

    .error-container {
      background-color: #f8d7da;
      color: #721c24;
      border: 1px solid #f1aeb5;
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 20px;
    }
  </style>
</head>

<body>
  <div class="admin-container">
    <div class="header">
      <div class="header-main">
        <h1 class="brand">Melodia</h1>
        <div class="user-profile">
          <span class="username">ADMIN</span>
          <i class="fas fa-user-circle"></i>
        </div>
      </div>
    </div>

    <div class="main-content">
      <div class="sidebar">
        <nav>
          <ul>
             <li><a href="/admin/dashboard"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
            <li class="active"><a href="/admin/products"><i class="fas fa-box"></i> Products</a></li>
            <li><a href="/admin/orders"><i class="fas fa-list"></i> Order Lists</a></li>
            <li><a href="/admin/customer"><i class="fas fa-users"></i>Users</a></li>
             <li><a href="/admin/sales-report"><i class="fas fa-chart-bar"></i> Sales Report</a></li>
            <li><a href="/admin/coupons"><i class="fas fa-tags"></i> Coupons</a></li>
            <li><a href="/admin/category"><i class="fas fa-folder"></i> Category</a></li>
            <li><a href="/admin/banners"><i class="fas fa-flag"></i> Banners</a></li>
            <li><a href="/admin/settings"><i class="fas fa-cog"></i> Settings</a></li>
            <li><a href="/admin/logout"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
          </ul>
        </nav>
      </div>

      <div class="products-content">
        <div class="page-header">
          <h2>Add New Product</h2>
        </div>

        <div class="form-container">
          <% if (typeof errors !=="undefined" && errors.length> 0) { %>
            <div class="error-container">
              <ul>
                <% errors.forEach(function(msg) { %>
                  <li>
                    <%= msg %>
                  </li>
                  <% }) %>
              </ul>
            </div>
            <% } %>

              <form action="/admin/products/add" method="POST" enctype="multipart/form-data">
                <div class="form-group">
                  <label class="form-label">Product Name <span class="required">*</span></label>
                  <input type="text" name="productName" required
                    value="<%= old && old.productName ? old.productName : '' %>" class="form-input"
                    placeholder="Enter product name" />
                </div>

                <div class="form-group">
                  <label class="form-label">Brand <span class="required">*</span></label>
                  <input type="text" name="brand" required value="<%= old && old.brand ? old.brand : '' %>"
                    class="form-input" placeholder="Enter brand name" />
                </div>

                <div class="form-group">
                  <label class="form-label">Category <span class="required">*</span></label>
                  <select name="categoryId" required class="form-select">
                    <option value="">-- Select Category --</option>
                    <% categories.forEach(cat=> { %>
                      <option value="<%= cat._id %>" <%=old && old.categoryId==cat._id ? 'selected' : '' %>>
                        <%= cat.name %>
                      </option>
                      <% }) %>
                  </select>
                </div>

                <div class="form-group">
                  <label class="form-label">Description <span class="required">*</span></label>
                  <textarea name="description" rows="4" required class="form-textarea"
                    placeholder="Enter product description"><%= old && old.description ? old.description : '' %></textarea>
                </div>

                <div class="form-group">
                  <label class="form-label">Offer (%)</label>
                  <input type="number" min="0" max="100" name="offer" value="" 
                    class="form-input" placeholder="Enter offer percentage (optional)" />
                </div>

                <div class="form-group">
                  <label class="form-label">Type</label>
                  <select name="type" class="form-select">
                    <option value="">-- Select Type --</option>
                    <option value="Wireless">Wireless</option>
                    <option value="Wired">Wired</option>
                    <!-- <option value="Bluetooth">Bluetooth</option> -->
                    <option value="Gaming">Gaming</option>
                    <!-- <option value="Studio">Studio</option> -->
                  </select>
                </div>

                <div class="form-group">
                  <label class="form-label">Battery Health (%)</label>
                  <input type="text" name="batteryHealth" value="" class="form-input"
                    placeholder="Enter battery health (any value)" />
                </div>

                <!-- Variants Section with Images -->
                <div class="form-group">
                  <label class="form-label">Product Variants <span class="required">*</span></label>
                  <div class="variants-container">
                    <div id="variants-area">
                      <!-- Variants will be added here -->
                    </div>
                    <button type="button" id="add-variant-btn" class="add-variant-btn">
                      <i class="fas fa-plus"></i> Add Variant
                    </button>
                  </div>
                </div>

                <div class="form-actions">
                  <a href="/admin/products" class="back-btn">
                    <i class="fas fa-arrow-left"></i> Back to Products
                  </a>
                  <button type="submit" class="save-btn">
                    <i class="fas fa-save"></i> Save Product
                  </button>
                </div>
              </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Croppie Modal -->
  <div id="cropper-modal" class="cropper-modal hidden">
    <div class="cropper-content">
      <div class="cropper-header">
        <h3>Crop & Resize Image</h3>
        <button type="button" id="close-cropper-btn" class="close-cropper">&times;</button>
      </div>
      <div class="cropper-body">
        <div class="cropper-image-container">
          <div id="croppie-container" style="width: 100%; height: 400px;"></div>
        </div>
        <div class="cropper-preview-container">
          <h4 style="margin-bottom: 10px; font-weight: 600;">Actions</h4>
          <div style="margin-bottom: 15px;">
            <button type="button" id="rotate-left" class="rotate-btn">
              <i class="fas fa-undo"></i> Rotate Left
            </button>
            <button type="button" id="rotate-right" class="rotate-btn">
              <i class="fas fa-redo"></i> Rotate Right
            </button>
          </div>
          <button type="button" id="save-cropped-btn" class="save-cropped-btn">
            <i class="fas fa-check"></i> Save Cropped Image
          </button>
        </div>
      </div>
    </div>
  </div>

  <style>
    .cropper-modal {
      position: fixed;
      inset: 0;
      background: rgba(0, 0, 0, 0.8);
      z-index: 1000;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .cropper-modal.hidden {
      display: none;
    }

    .cropper-content {
      background: white;
      border-radius: 12px;
      padding: 24px;
      max-width: 90vw;
      max-height: 90vh;
      width: 800px;
    }

    .cropper-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .cropper-header h3 {
      font-size: 18px;
      font-weight: 600;
      color: #2c3e50;
    }

    .close-cropper {
      background: none;
      border: none;
      font-size: 24px;
      cursor: pointer;
      color: #6c757d;
    }

    .cropper-body {
      display: flex;
      gap: 20px;
    }

    .cropper-image-container {
      flex: 2;
    }

    .cropper-preview-container {
      flex: 1;
    }

    .rotate-btn {
      background: #6c757d;
      color: white;
      padding: 6px 10px;
      border-radius: 4px;
      font-size: 12px;
      border: none;
      cursor: pointer;
      margin-right: 8px;
    }

    .save-cropped-btn {
      width: 100%;
      background: #667eea;
      color: white;
      padding: 10px;
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      border: none;
    }
  </style>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.js"></script>
  <script>
    let variantCount = 0;
    let croppieInstance = null;
    let currentVariantIndex = 0;
    const variantImages = {};

    function openCroppie(input, variantIndex) {
      if (input.files && input.files[0]) {
        currentVariantIndex = variantIndex;
        const file = input.files[0];

        if (!file.type.startsWith('image/')) {
          Swal.fire('Error', 'Please select a valid image file', 'error');
          return;
        }

        const reader = new FileReader();
        reader.onload = function (e) {
          showCroppieModal(e.target.result);
        };
        reader.readAsDataURL(file);
      }
    }

    function showCroppieModal(imageSrc) {
      const modal = document.getElementById('cropper-modal');
      modal.classList.remove('hidden');

      setTimeout(() => {
        if (croppieInstance) {
          croppieInstance.destroy();
        }

        const container = document.getElementById('croppie-container');
        container.innerHTML = '';

        croppieInstance = new Croppie(container, {
          viewport: { width: 300, height: 300, type: 'square' },
          boundary: { width: 400, height: 400 },
          showZoomer: true,
          enableOrientation: true,
          enableResize: false,
          enableExif: true,
          quality: 0.9,
          format: 'jpeg'
        });

        croppieInstance.bind({ url: imageSrc });
      }, 300);
    }

    function hideCroppieModal() {
      document.getElementById('cropper-modal').classList.add('hidden');
      if (croppieInstance) {
        croppieInstance.destroy();
        croppieInstance = null;
      }
    }

    function saveCroppedImage() {
      if (!croppieInstance) return;

      croppieInstance.result({
        type: 'blob',
        size: { width: 800, height: 800 },
        format: 'jpeg',
        quality: 0.9
      }).then(function (blob) {
        if (!variantImages[currentVariantIndex]) {
          variantImages[currentVariantIndex] = [];
        }

        // Create a proper File object with a unique name
        const fileName = `variant-${currentVariantIndex}-image-${Date.now()}.jpg`;
        const file = new File([blob], fileName, {
          type: 'image/jpeg',
          lastModified: Date.now()
        });

        variantImages[currentVariantIndex].push(file);
        updateVariantImages(currentVariantIndex);
        updateHiddenInput(currentVariantIndex);

        console.log(`Added image to variant ${currentVariantIndex}:`, {
          fileName: file.name,
          size: file.size,
          type: file.type
        });

        Swal.fire({
          toast: true,
          position: 'top-end',
          icon: 'success',
          title: `Image added to variant ${currentVariantIndex + 1}`,
          showConfirmButton: false,
          timer: 2000
        });

        hideCroppieModal();
      });
    }

    function updateVariantImages(variantIndex) {
      const previewContainer = document.getElementById(`preview-${variantIndex}`);
      if (!previewContainer) return;

      previewContainer.innerHTML = '';

      if (variantImages[variantIndex]) {
        variantImages[variantIndex].forEach((file, index) => {
          const imageUrl = URL.createObjectURL(file);
          const imageHtml = `
            <div class="image-preview-item">
              <img src="${imageUrl}" alt="Variant image ${index + 1}">
              <button type="button" onclick="removeVariantImage(${variantIndex}, ${index})" class="remove-image-btn">×</button>
            </div>
          `;
          previewContainer.insertAdjacentHTML('beforeend', imageHtml);
        });
      }
    }

    function updateHiddenInput(variantIndex) {
      const dataTransfer = new DataTransfer();
      if (variantImages[variantIndex]) {
        variantImages[variantIndex].forEach((file) => {
          dataTransfer.items.add(file);
        });
      }

      const hiddenInput = document.getElementById(`final-images-${variantIndex}`);
      if (hiddenInput) {
        hiddenInput.files = dataTransfer.files;
        console.log(`Updated hidden input for variant ${variantIndex} with ${dataTransfer.files.length} files`);
        
        // Debug: Log file details
        for (let i = 0; i < hiddenInput.files.length; i++) {
          const file = hiddenInput.files[i];
          console.log(`  File ${i}: ${file.name}, ${file.size} bytes, ${file.type}`);
        }
      }
    }

    function removeVariantImage(variantIndex, imageIndex) {
      if (variantImages[variantIndex]) {
        variantImages[variantIndex].splice(imageIndex, 1);
        updateVariantImages(variantIndex);
        updateHiddenInput(variantIndex);
      }
    }

    // Event listeners
    document.getElementById('close-cropper-btn').addEventListener('click', hideCroppieModal);
    document.getElementById('save-cropped-btn').addEventListener('click', saveCroppedImage);
    document.getElementById('rotate-left').addEventListener('click', () => croppieInstance && croppieInstance.rotate(-90));
    document.getElementById('rotate-right').addEventListener('click', () => croppieInstance && croppieInstance.rotate(90));

    function addVariant() {
      const variantHtml = `
        <div class="variant-card" data-variant="${variantCount}">
          <div class="variant-header">
            <h4 class="variant-title">Variant ${variantCount + 1}</h4>
            <button type="button" onclick="removeVariant(this)" class="remove-variant-btn">
              <i class="fas fa-times"></i> Remove
            </button>
          </div>
          
          <div class="variant-fields">
            <div>
              <label class="form-label">Color <span class="required">*</span></label>
              <input type="text" name="variants[${variantCount}][color]" required class="form-input" placeholder="e.g., Red, Blue" value="">
            </div>
            <div>
              <label class="form-label">Price <span class="required">*</span></label>
              <input type="number" name="variants[${variantCount}][price]" required min="0" step="0.01" class="form-input" placeholder="0.00" value="">
            </div>
            <div>
              <label class="form-label">Stock</label>
              <input type="number" name="variants[${variantCount}][stock]" min="0" class="form-input" placeholder="0" value="0">
            </div>
          </div>

          <div>
            <label class="form-label">Variant Images <span class="required">*</span></label>
            <div class="image-upload-area">
              <input type="file" id="file-input-${variantCount}" accept="image/*" style="display: none;" onchange="openCroppie(this, ${variantCount})">
              <button type="button" onclick="document.getElementById('file-input-${variantCount}').click()" class="upload-btn">
                <i class="fas fa-upload"></i> Add Image (Crop & Resize)
              </button>
              <p style="margin-top: 10px; font-size: 14px; color: #666;">Add images one by one with cropping. Min 2 required.</p>
            </div>
            <div class="image-previews" id="preview-${variantCount}"></div>
            <input type="file" name="variants[${variantCount}][images]" multiple style="display: none;" id="final-images-${variantCount}" accept="image/*">
          </div>
        </div>
      `;

      document.getElementById('variants-area').insertAdjacentHTML('beforeend', variantHtml);
      variantCount++;
    }

    function removeVariant(btn) {
      btn.closest('.variant-card').remove();
    }

    function handleImageUpload(input, variantIndex) {
      const previewContainer = document.getElementById(`preview-${variantIndex}`);
      previewContainer.innerHTML = '';

      Array.from(input.files).forEach((file, index) => {
        const reader = new FileReader();
        reader.onload = function (e) {
          const imageHtml = `
            <div class="image-preview-item">
              <img src="${e.target.result}" alt="Variant image ${index + 1}">
              <button type="button" onclick="removeImage(this, ${variantIndex})" class="remove-image-btn">×</button>
            </div>
          `;
          previewContainer.insertAdjacentHTML('beforeend', imageHtml);
        };
        reader.readAsDataURL(file);
      });
    }

    function removeImage(btn, variantIndex) {
      btn.closest('.image-preview-item').remove();
      // Note: This doesn't remove from the file input, just the preview
      // For full functionality, you'd need to rebuild the FileList
    }

    // Add first variant on page load
    document.addEventListener('DOMContentLoaded', function () {
      addVariant();

      document.getElementById('add-variant-btn').addEventListener('click', addVariant);

      // Form validation and submission
      document.querySelector('form').addEventListener('submit', function (e) {
        e.preventDefault(); // Prevent default submission
        
        const variants = document.querySelectorAll('.variant-card');
        if (variants.length === 0) {
          Swal.fire('Error', 'Please add at least one variant', 'error');
          return;
        }

        let hasError = false;
        variants.forEach((variant, index) => {
          const color = variant.querySelector(`[name="variants[${index}][color]"]`).value;
          const price = variant.querySelector(`[name="variants[${index}][price]"]`).value;

          if (!color || !price) {
            hasError = true;
          }
        });

        if (hasError) {
          Swal.fire('Error', 'Each variant must have color and price', 'error');
          return;
        }

        // Create FormData and append all form fields including Croppie images
        const formData = new FormData();
        
        // Add basic product fields
        const formElements = this.elements;
        for (let i = 0; i < formElements.length; i++) {
          const element = formElements[i];
          if (element.name && element.type !== 'file' && !element.name.includes('[images]')) {
            if (element.type === 'checkbox') {
              if (element.checked) {
                formData.append(element.name, element.value);
              }
            } else {
              formData.append(element.name, element.value);
            }
          }
        }

        // Add Croppie images for each variant
        variants.forEach((variant, index) => {
          const hiddenInput = document.getElementById(`final-images-${index}`);
          if (hiddenInput && hiddenInput.files) {
            for (let j = 0; j < hiddenInput.files.length; j++) {
              formData.append(`variants[${index}][images]`, hiddenInput.files[j]);
            }
          }
        });

        console.log('Submitting form with FormData...');
        
        // Show loading
        Swal.fire({
          title: 'Adding Product...',
          text: 'Please wait while we process your product',
          allowOutsideClick: false,
          didOpen: () => {
            Swal.showLoading();
          }
        });

        // Submit with fetch
        fetch('/admin/products/add', {
          method: 'POST',
          body: formData
        })
        .then(response => {
          if (response.redirected) {
            window.location.href = response.url;
          } else {
            return response.text();
          }
        })
        .then(html => {
          if (html) {
            // If we get HTML back, it means there were errors
            document.open();
            document.write(html);
            document.close();
          }
        })
        .catch(error => {
          console.error('Error:', error);
          Swal.fire('Error', 'Failed to add product. Please try again.', 'error');
        });
      });
    });
  </script>
</body>

</html>