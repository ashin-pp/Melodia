<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Order Management | Melodia Admin</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"/>
</head>
<body class="bg-gray-100 font-sans">
    <div class="flex min-h-screen">
        <!-- Sidebar -->
        <aside class="w-64 bg-[#15172B] text-white flex flex-col justify-between">
            <div>
                <h1 class="text-center text-2xl font-bold py-6">MELODIA</h1>
                <ul class="space-y-2 px-4">
                    <li>
                        <a href="/admin/dashboard" class="flex items-center p-2 hover:bg-blue-600 rounded">
                            <i class="fas fa-tachometer-alt mr-2"></i> Dashboard
                        </a>
                    </li>
                    <li>
                        <a href="/admin/customer" class="flex items-center p-2 hover:bg-blue-600 rounded">
                            <i class="fas fa-users mr-2"></i> Customers
                        </a>
                    </li>
                    <li>
                        <a href="/admin/products" class="flex items-center p-2 hover:bg-blue-600 rounded">
                            <i class="fas fa-box mr-2"></i> Products
                        </a>
                    </li>
                    <li>
                        <a href="/admin/orders" class="flex items-center p-2 bg-blue-600 rounded font-semibold">
                            <i class="fas fa-shopping-cart mr-2"></i> Orders
                        </a>
                    </li>
                    <li>
                        <a href="/admin/category" class="flex items-center p-2 hover:bg-blue-600 rounded">
                            <i class="fas fa-layer-group mr-2"></i> Category
                        </a>
                    </li>
                </ul>
            </div>
            <div class="px-4 py-4 space-y-2">
                <a href="/admin/logout" class="flex items-center p-2 hover:bg-red-600 rounded">
                    <i class="fas fa-sign-out-alt mr-2"></i> Logout
                </a>
            </div>
        </aside>

        <!-- Main content -->
        <main class="flex-1 px-6 py-8">
            <!-- Topbar -->
            <div class="flex justify-between items-center bg-white p-4 rounded shadow mb-8">
                <div>
                    <h2 class="text-2xl font-bold text-gray-900">Order Management</h2>
                    <p class="text-gray-600 text-sm mt-1">Manage and track all customer orders</p>
                </div>
                <div class="flex items-center gap-3">
                    <span class="text-gray-700 font-semibold uppercase">
                        <i class="fas fa-user-shield"></i> ADMIN
                    </span>
                </div>
            </div>

            <!-- Loading Overlay -->
            <div id="loading-overlay" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
                <div class="bg-white rounded-lg p-6 shadow-xl">
                    <div class="flex items-center gap-3">
                        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
                        <span>Processing...</span>
                    </div>
                </div>
            </div>

            <!-- Stats cards -->
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6 mb-8">
                <div class="bg-blue-100 text-blue-800 p-5 rounded-lg shadow">
                    <p class="text-sm font-medium">Total Orders</p>
                    <h2 class="text-2xl font-bold mt-2" id="total-orders">-</h2>
                </div>
                <div class="bg-yellow-100 text-yellow-800 p-5 rounded-lg shadow">
                    <p class="text-sm font-medium">Pending Orders</p>
                    <h2 class="text-2xl font-bold mt-2" id="pending-orders">-</h2>
                </div>
                <div class="bg-green-100 text-green-800 p-5 rounded-lg shadow">
                    <p class="text-sm font-medium">Delivered Orders</p>
                    <h2 class="text-2xl font-bold mt-2" id="delivered-orders">-</h2>
                </div>
                <div class="bg-red-100 text-red-800 p-5 rounded-lg shadow">
                    <p class="text-sm font-medium">Cancelled Orders</p>
                    <h2 class="text-2xl font-bold mt-2" id="cancelled-orders">-</h2>
                </div>
            </div>

            <!-- Search and Filters -->
            <div class="bg-white rounded-lg shadow p-6 mb-8">
                <h3 class="text-lg font-semibold mb-4">Search & Filter Orders</h3>
                <div class="grid grid-cols-1 md:grid-cols-6 gap-4">
                    <!-- Search Input -->
                    <div class="md:col-span-2">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Search</label>
                        <input type="text" id="search-input"
                               placeholder="Order ID, customer name, email..." 
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    </div>
                    
                    <!-- Status Filter -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Status</label>
                        <select id="status-filter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="all">All Status</option>
                            <option value="Pending">Pending</option>
                            <option value="Confirmed">Confirmed</option>
                            <option value="Processing">Processing</option>
                            <option value="Shipped">Shipped</option>
                            <option value="Out for Delivery">Out for Delivery</option>
                            <option value="Delivered">Delivered</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                    </div>
                    
                    <!-- Sort By -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Sort By</label>
                        <select id="sort-by" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="orderDate">Order Date</option>
                            <option value="total">Total Amount</option>
                            <option value="customer">Customer Name</option>
                        </select>
                    </div>
                    
                    <!-- Sort Order -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Order</label>
                        <select id="sort-order" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="desc">Descending</option>
                            <option value="asc">Ascending</option>
                        </select>
                    </div>
                    
                    <!-- Action Buttons -->
                    <div class="flex gap-2 items-end">
                        <button id="search-btn" type="button" 
                                class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition font-medium">
                            <i class="fas fa-search mr-1"></i> Search
                        </button>
                        <button id="clear-btn" type="button"
                                class="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition font-medium">
                            <i class="fas fa-times mr-1"></i> Clear
                        </button>
                    </div>
                </div>
            </div>

            <!-- Orders Table -->
            <div class="bg-white rounded-lg shadow p-6">
                <h3 class="text-lg font-semibold mb-4">Orders</h3>
                <div class="overflow-x-auto rounded">
                    <table class="w-full text-sm">
                        <thead class="bg-gray-50 text-gray-700">
                            <tr>
                                <th class="py-3 px-4 text-left">Order ID</th>
                                <th class="py-3 px-4 text-left">Date</th>
                                <th class="py-3 px-4 text-left">Customer</th>
                                <th class="py-3 px-4 text-left">Items</th>
                                <th class="py-3 px-4 text-left">Status</th>
                                <th class="py-3 px-4 text-left">Total</th>
                                <th class="py-3 px-4 text-left">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="orders-table-body" class="text-gray-700">
                            <!-- Orders will be loaded dynamically -->
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination -->
                <div id="pagination-container" class="mt-6 flex items-center justify-between">
                    <!-- Pagination will be rendered here -->
                </div>
            </div>
        </main>
    </div>

    <!-- Order Management JavaScript -->
    <script>
        class AdminOrderManager {
            constructor() {
                this.loadingOverlay = document.getElementById('loading-overlay');
                this.currentFilters = {
                    page: 1,
                    limit: 20,
                    search: '',
                    status: 'all',
                    sortBy: 'orderDate',
                    order: 'desc'
                };
                this.init();
            }

            init() {
                this.bindEvents();
                this.loadOrders();
            }

            bindEvents() {
                // Search input with debounce
                let searchTimeout;
                document.getElementById('search-input').addEventListener('input', (e) => {
                    clearTimeout(searchTimeout);
                    searchTimeout = setTimeout(() => {
                        this.currentFilters.search = e.target.value;
                        this.currentFilters.page = 1;
                        this.loadOrders();
                    }, 500);
                });

                // Status filter
                document.getElementById('status-filter').addEventListener('change', (e) => {
                    this.currentFilters.status = e.target.value;
                    this.currentFilters.page = 1;
                    this.loadOrders();
                });

                // Filter changes
                document.getElementById('sort-by').addEventListener('change', (e) => {
                    this.currentFilters.sortBy = e.target.value;
                    this.currentFilters.page = 1;
                    this.loadOrders();
                });

                document.getElementById('sort-order').addEventListener('change', (e) => {
                    this.currentFilters.order = e.target.value;
                    this.currentFilters.page = 1;
                    this.loadOrders();
                });

                // Search button
                document.getElementById('search-btn').addEventListener('click', () => {
                    this.currentFilters.search = document.getElementById('search-input').value;
                    this.currentFilters.status = document.getElementById('status-filter').value;
                    this.currentFilters.page = 1;
                    this.loadOrders();
                });

                // Clear button
                document.getElementById('clear-btn').addEventListener('click', () => {
                    this.clearFilters();
                });
            }

            async loadOrders() {
                try {
                    this.showLoading();
                    const params = new URLSearchParams(this.currentFilters);
                    const response = await fetch(`/admin/api/orders?${params}`, {
                        credentials: 'include'
                    });
                    const result = await response.json();

                    if (result.success) {
                        this.renderOrders(result.data.orders);
                        this.renderPagination(result.data.pagination);
                        this.updateStats(result.data.orders);
                    } else {
                        this.showToast('error', result.error || 'Failed to load orders');
                    }
                } catch (error) {
                    console.error('Load orders error:', error);
                    this.showToast('error', 'Failed to load orders');
                } finally {
                    this.hideLoading();
                }
            }

            renderOrders(orders) {
                const tbody = document.getElementById('orders-table-body');
                
                if (orders.length === 0) {
                    tbody.innerHTML = `
                        <tr>
                            <td colspan="7" class="py-8 px-4 text-center text-gray-500">
                                <i class="fas fa-shopping-bag text-4xl mb-2 opacity-50"></i>
                                <p>No orders found</p>
                            </td>
                        </tr>
                    `;
                    return;
                }

                tbody.innerHTML = orders.map(order => `
                    <tr class="border-b hover:bg-gray-50">
                        <td class="py-3 px-4 text-blue-600 font-mono">#${order.referenceNo}</td>
                        <td class="py-3 px-4">
                            ${new Date(order.orderDate).toLocaleDateString('en-IN', { 
                                day: 'numeric', 
                                month: 'short', 
                                year: 'numeric' 
                            })}
                        </td>
                        <td class="py-3 px-4">
                            <div>
                                <div class="font-medium">${order.user.name}</div>
                                <div class="text-xs text-gray-500">${order.user.email}</div>
                            </div>
                        </td>
                        <td class="py-3 px-4">${order.itemCount} item${order.itemCount !== 1 ? 's' : ''}</td>
                        <td class="py-3 px-4">
                            <span class="px-2 py-1 text-xs font-semibold rounded-full ${this.getStatusColor(order.status)}">
                                ${order.status}
                            </span>
                        </td>
                        <td class="py-3 px-4 font-semibold">₹${order.total.toLocaleString('en-IN')}</td>
                        <td class="py-3 px-4">
                            <div class="flex gap-2">
                                <button onclick="viewOrder('${order.id}')" 
                                        class="text-blue-600 hover:text-blue-800" title="View Details">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <select onchange="updateOrderStatus('${order.id}', this.value)" 
                                        class="text-xs px-2 py-1 border rounded">
                                    <option value="">Change Status</option>
                                    <option value="Pending" ${order.status === 'Pending' ? 'selected' : ''}>Pending</option>
                                    <option value="Confirmed" ${order.status === 'Confirmed' ? 'selected' : ''}>Confirmed</option>
                                    <option value="Processing" ${order.status === 'Processing' ? 'selected' : ''}>Processing</option>
                                    <option value="Shipped" ${order.status === 'Shipped' ? 'selected' : ''}>Shipped</option>
                                    <option value="Out for Delivery" ${order.status === 'Out for Delivery' ? 'selected' : ''}>Out for Delivery</option>
                                    <option value="Delivered" ${order.status === 'Delivered' ? 'selected' : ''}>Delivered</option>
                                    <option value="Cancelled" ${order.status === 'Cancelled' ? 'selected' : ''}>Cancelled</option>
                                </select>
                            </div>
                        </td>
                    </tr>
                `).join('');
            }

            getStatusColor(status) {
                const colors = {
                    'Pending': 'bg-yellow-100 text-yellow-800',
                    'Confirmed': 'bg-blue-100 text-blue-800',
                    'Processing': 'bg-purple-100 text-purple-800',
                    'Shipped': 'bg-indigo-100 text-indigo-800',
                    'Out for Delivery': 'bg-orange-100 text-orange-800',
                    'Delivered': 'bg-green-100 text-green-800',
                    'Cancelled': 'bg-red-100 text-red-800'
                };
                return colors[status] || 'bg-gray-100 text-gray-800';
            }

            renderPagination(pagination) {
                const container = document.getElementById('pagination-container');
                
                if (pagination.totalPages <= 1) {
                    container.innerHTML = '<div class="text-sm text-gray-500">Showing all orders</div>';
                    return;
                }

                let paginationHTML = `
                    <div class="text-sm text-gray-500">
                        Showing ${pagination.currentPage * pagination.limit - pagination.limit + 1}-${Math.min(pagination.currentPage * pagination.limit, pagination.totalOrders)} of ${pagination.totalOrders} orders
                    </div>
                    <div class="flex gap-2">
                `;

                if (pagination.hasPrev) {
                    paginationHTML += `
                        <button onclick="adminOrderManager.changePage(${pagination.currentPage - 1})"
                                class="px-3 py-1 border border-gray-300 text-gray-700 rounded hover:bg-gray-50 transition">
                            Previous
                        </button>
                    `;
                }

                for (let i = Math.max(1, pagination.currentPage - 2); i <= Math.min(pagination.totalPages, pagination.currentPage + 2); i++) {
                    paginationHTML += `
                        <button onclick="adminOrderManager.changePage(${i})"
                                class="px-3 py-1 ${i === pagination.currentPage ? 'bg-blue-600 text-white' : 'border border-gray-300 text-gray-700 hover:bg-gray-50'} rounded transition">
                            ${i}
                        </button>
                    `;
                }

                if (pagination.hasNext) {
                    paginationHTML += `
                        <button onclick="adminOrderManager.changePage(${pagination.currentPage + 1})"
                                class="px-3 py-1 border border-gray-300 text-gray-700 rounded hover:bg-gray-50 transition">
                            Next
                        </button>
                    `;
                }

                paginationHTML += '</div>';
                container.innerHTML = paginationHTML;
            }

            updateStats(orders) {
                // Get all orders count from server for accurate stats
                fetch('/admin/api/orders?limit=1000', { credentials: 'include' })
                    .then(response => response.json())
                    .then(result => {
                        if (result.success) {
                            const allOrders = result.data.orders;
                            const stats = {
                                total: allOrders.length,
                                pending: allOrders.filter(o => ['Pending', 'Confirmed'].includes(o.status)).length,
                                delivered: allOrders.filter(o => o.status === 'Delivered').length,
                                cancelled: allOrders.filter(o => o.status === 'Cancelled').length
                            };

                            document.getElementById('total-orders').textContent = stats.total;
                            document.getElementById('pending-orders').textContent = stats.pending;
                            document.getElementById('delivered-orders').textContent = stats.delivered;
                            document.getElementById('cancelled-orders').textContent = stats.cancelled;
                        }
                    });
            }

            changePage(page) {
                this.currentFilters.page = page;
                this.loadOrders();
            }

            clearFilters() {
                this.currentFilters = {
                    page: 1,
                    limit: 20,
                    search: '',
                    status: 'all',
                    sortBy: 'orderDate',
                    order: 'desc'
                };

                document.getElementById('search-input').value = '';
                document.getElementById('status-filter').value = 'all';
                document.getElementById('sort-by').value = 'orderDate';
                document.getElementById('sort-order').value = 'desc';
                this.loadOrders();
            }

            showLoading() {
                this.loadingOverlay.classList.remove('hidden');
            }

            hideLoading() {
                this.loadingOverlay.classList.add('hidden');
            }

            showToast(type, message) {
                const toast = document.createElement('div');
                toast.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg transition-all duration-300 transform translate-x-full opacity-0`;
                
                if (type === 'success') {
                    toast.classList.add('bg-green-100', 'text-green-800', 'border', 'border-green-200');
                } else {
                    toast.classList.add('bg-red-100', 'text-red-800', 'border', 'border-red-200');
                }

                toast.innerHTML = `
                    <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} mr-2"></i>
                    <span>${message}</span>
                `;

                document.body.appendChild(toast);

                setTimeout(() => {
                    toast.classList.remove('translate-x-full', 'opacity-0');
                    toast.classList.add('translate-x-0', 'opacity-100');
                }, 100);

                setTimeout(() => {
                    toast.classList.add('translate-x-full', 'opacity-0');
                    setTimeout(() => toast.remove(), 300);
                }, 3000);
            }
        }

        // Global functions
        function viewOrder(orderId) {
            window.location.href = `/admin/orders/${orderId}`;
        }

        async function updateOrderStatus(orderId, newStatus) {
            if (!newStatus) return;
            
            if (confirm(`Change order status to ${newStatus}?`)) {
                try {
                    const response = await fetch(`/admin/orders/${orderId}/status`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ status: newStatus }),
                        credentials: 'include'
                    });

                    const result = await response.json();
                    
                    if (result.success) {
                        adminOrderManager.showToast('success', result.message);
                        adminOrderManager.loadOrders();
                    } else {
                        adminOrderManager.showToast('error', result.error || 'Failed to update status');
                    }
                } catch (error) {
                    console.error('Update status error:', error);
                    adminOrderManager.showToast('error', 'Failed to update order status');
                }
            }
        }

        // Initialize admin order manager
        const adminOrderManager = new AdminOrderManager();
    </script>
</body>
</html>